package conformancetests;

import static org.junit.Assert.*;
import static org.semanticweb.owlapi.apibinding.OWLFunctionalSyntaxFactory.*;

import java.io.File;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.junit.Ignore;
import org.junit.Rule;
/* This file is part of the JFact DL reasoner
 Copyright 2011-2013 by Ignazio Palmisano, Dmitry Tsarkov, University of Manchester
 This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA*/
import org.junit.Test;
import org.junit.rules.Timeout;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.reasoner.BufferingMode;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.vocab.XSDVocabulary;

import testbase.TestBase;
import uk.ac.manchester.cs.jfact.JFactReasoner;
import uk.ac.manchester.cs.jfact.kernel.options.JFactReasonerConfiguration;

@SuppressWarnings("javadoc")
@Ignore
public class WebOnt_miscellaneous_wineTestCase extends TestBase {

    @Rule public Timeout timeout = new Timeout(10_000);
    OWLOntology o = load();

    protected OWLOntology load() {
        try {
            return m.loadOntologyFromOntologyDocument(readWine());
        } catch (OWLOntologyCreationException e) {
            throw new OWLRuntimeException(e);
        }
    }

    protected InputStream readWine() {
        return WebOnt_miscellaneous_wineTestCase.class.getResourceAsStream("/wine.fss");
    }

    @ChangedTestCase
    public void testWebOnt_miscellaneous_001() {
        String conclusion = "";
        String id = "WebOnt_miscellaneous_001";
        TestClasses tc = TestClasses.valueOf("CONSISTENCY");
        String d = "Wine example taken from the guide. Note that this is the same as the ontology http://www.w3.org/2002/03owlt/miscellaneous/consistent002 imported in other tests.";
        JUnitRunner r = new JUnitRunner(m, o, conclusion, id, tc, d);
        r.setConfig(config());
        r.setReasonerFactory(factory());
        r.run();
    }

    protected JFactReasonerConfiguration config() {
        return new JFactReasonerConfiguration();// .setAbsorptionLoggingActive(true).setLoggingActive(true);
    }

    protected JFactReasonerConfiguration noconfig() {
        return new JFactReasonerConfiguration();
    }

    public void shouldBeFastWithOldOrder() {
        System.out.println("WebOnt_miscellaneous_wineTestCase.shouldBeFastWithOldOrder() ");
        long start = System.currentTimeMillis();
        OWLReasoner r = new JFactReasoner(o, java7order(), config(), BufferingMode.BUFFERING);
        assertTrue(r.isConsistent());
        // assertTrue(r.isEntailed(df.getOWLSubClassOfAxiom(Chianti, Wine)));
        System.out.println(
            "WebOnt_miscellaneous_wineTestCase.shouldBeFastWithOldOrder() " + (System.currentTimeMillis() - start));
    }

    @Test
    public void shouldBeFastWithanyOrder() {
        System.out.println("WebOnt_miscellaneous_wineTestCase.shouldBeFastWithanyOrder() ");
        long start = System.currentTimeMillis();
        OWLReasoner r = new JFactReasoner(o, axioms(true), config(), BufferingMode.BUFFERING);
        assertTrue(r.isConsistent());
        System.out.println(
            "WebOnt_miscellaneous_wineTestCase.shouldBeFastWithanyOrder() " + (System.currentTimeMillis() - start));
    }

    @Test
    public void shouldBeFastWithOriginalOrder() {
        System.out.println("WebOnt_miscellaneous_wineTestCase.shouldBeFastWithOriginalOrder() ");
        long start = System.currentTimeMillis();
        OWLReasoner r = new JFactReasoner(o, axioms(false), config(), BufferingMode.BUFFERING);
        assertTrue(r.isConsistent());
        System.out.println("WebOnt_miscellaneous_wineTestCase.shouldBeFastWithOriginalOrder() "
            + (System.currentTimeMillis() - start));
    }

    private List<OWLAxiom> axioms(boolean java8) {
        if (java8) {
            List<OWLAxiom> toReturn = java8order();
            List<OWLAxiom> toRemove = JFactReasoner.importsIncluded(o);
            for (int i = 0; i < toReturn.size(); i++) {
                if (!toReturn.get(i).isLogicalAxiom()) {
                    if (toReturn.get(i).equals(toRemove.get(i))) {
                        toReturn.set(i, null);
                    }
                }
                if (toReturn.get(i) instanceof OWLClassAssertionAxiom) {
                    toReturn.set(i, null);
                }
            }
            for (int i = 0; i < toReturn.size();) {
                if (toReturn.get(i) == null) {
                    toReturn.remove(i);
                } else {
                    i++;
                }
            }
            System.out.println("WebOnt_miscellaneous_wineTestCase.axioms() " + toReturn.size());
            return toReturn;
        }
        List<OWLAxiom> toReturn = JFactReasoner.importsIncluded(o);
        List<OWLAxiom> toRemove = java8order();
        for (int i = 0; i < toReturn.size(); i++) {
            if (!toReturn.get(i).isLogicalAxiom()) {
                if (toReturn.get(i).equals(toRemove.get(i))) {
                    toReturn.set(i, null);
                }
            }
            if (toReturn.get(i) instanceof OWLClassAssertionAxiom) {
                toReturn.set(i, null);
            }
        }
        for (int i = 0; i < toReturn.size();) {
            if (toReturn.get(i) == null) {
                toReturn.remove(i);
            } else {
                i++;
            }
        }
        System.out.println("WebOnt_miscellaneous_wineTestCase.axioms() " + toReturn.size());
        return toReturn;
    }

    public void shouldBeSame() throws Exception {
        OWLOntology ont = m.loadOntologyFromOntologyDocument(readWine());
        List<OWLAxiom> importsIncluded = JFactReasoner.importsIncluded(ont);
        PrintStream out1 = new PrintStream(new File("wineaxioms7.txt"));
        PrintStream out2 = new PrintStream(new File("wineaxioms8.txt"));
        importsIncluded.forEach(x -> out1.println(x.toString()));
        List<OWLAxiom> java8order = java8order();
        java8order.forEach(x -> out2.println(x.toString()));
        out1.close();
        out2.close();
        // java8order.removeAll(importsIncluded);
        // importsIncluded.removeAll(java8order());
        assertEquals(importsIncluded, java8order);
    }

    public List<OWLAxiom> java7order() {
        List<OWLAxiom> axioms = new ArrayList<>();
        declarations(axioms);
        ranges7(axioms);
        remaining(axioms);
        return axioms;
    }

    private void ranges8(List<OWLAxiom> axioms) {
        axioms.add(ObjectPropertyRange(adjacentRegion, Region));
        axioms.add(ObjectPropertyRange(course, MealCourse));
        axioms.add(ObjectPropertyRange(hasBody, WineBody));
        axioms.add(ObjectPropertyRange(hasColor, WineColor));
        axioms.add(ObjectPropertyRange(hasDrink, PotableLiquid));
        axioms.add(ObjectPropertyRange(hasFlavor, WineFlavor));
        axioms.add(ObjectPropertyRange(hasFood, EdibleThing));
        axioms.add(ObjectPropertyRange(hasSugar, WineSugar));
        axioms.add(ObjectPropertyRange(hasVintageYear, VintageYear));
        axioms.add(ObjectPropertyRange(hasWineDescriptor, WineDescriptor));
        axioms.add(ObjectPropertyRange(locatedIn, Region));
        axioms.add(ObjectPropertyRange(madeFromFruit, Fruit));
        axioms.add(ObjectPropertyRange(madeFromGrape, WineGrape));
        //
        // axioms.add(ObjectPropertyRange(course, MealCourse));
        // axioms.add(ObjectPropertyRange(madeFromFruit, Fruit));
        // axioms.add(ObjectPropertyRange(hasColor, WineColor));
        // axioms.add(ObjectPropertyRange(hasDrink, PotableLiquid));
        // axioms.add(ObjectPropertyRange(hasSugar, WineSugar));
        // axioms.add(ObjectPropertyRange(hasWineDescriptor, WineDescriptor));
        // axioms.add(ObjectPropertyRange(hasVintageYear, VintageYear));
        // axioms.add(ObjectPropertyRange(hasFood, EdibleThing));
        // axioms.add(ObjectPropertyRange(locatedIn, Region));
        // axioms.add(ObjectPropertyRange(madeFromGrape, WineGrape));
        // axioms.add(ObjectPropertyRange(hasFlavor, WineFlavor));
        // axioms.add(ObjectPropertyRange(hasBody, WineBody));
        // axioms.add(ObjectPropertyRange(adjacentRegion, Region));
    }

    private void ranges7(List<OWLAxiom> axioms) {
        axioms.add(ObjectPropertyRange(madeFromFruit, Fruit));
        axioms.add(ObjectPropertyRange(course, MealCourse));
    }

    public List<OWLAxiom> java8order() {
        List<OWLAxiom> axioms = new ArrayList<>();
        declarations(axioms);
        ranges8(axioms);
        remaining(axioms);
        return axioms;
    }

    protected void remaining(List<OWLAxiom> axioms) {
        axioms.add(FunctionalObjectProperty(hasBody));
        axioms.add(FunctionalObjectProperty(hasColor));
        axioms.add(FunctionalObjectProperty(hasFlavor));
        axioms.add(FunctionalObjectProperty(hasMaker));
        axioms.add(FunctionalObjectProperty(hasSugar));
        axioms.add(FunctionalObjectProperty(hasVintageYear));
        axioms.add(DifferentIndividuals(Bancroft, ChateauChevalBlanc, ChateauDYchem, ChateauDeMeursault,
            ChateauLafiteRothschild, ChateauMargauxWinery, ChateauMorgon, ClosDeLaPoussie, ClosDeVougeot,
            CongressSprings, Corbans, CortonMontrachet, Cotturi, DAnjou, Elyse, Forman, Foxen, GaryFarrell,
            KalinCellars, KathrynKennedy, LaneTanner, Longridge, Marietta, McGuinnesso, MountEdenVineyard, Mountadam,
            PageMillWinery, PeterMccoy, PulignyMontrachet, SantaCruzMountainVineyard, SaucelitoCanyon, SchlossRothermel,
            SchlossVolrad, SeanThackrey, Selaks, SevreEtMaine, StGenevieve, Stonleigh, Taylor, Ventana, WhitehallLane));
        axioms.add(DifferentIndividuals(Delicate, Moderate, Strong));
        axioms.add(DifferentIndividuals(Dry, OffDry));
        axioms.add(DifferentIndividuals(Dry, OffDry, Sweet));
        axioms.add(DifferentIndividuals(Dry, Sweet));
        axioms.add(DifferentIndividuals(Full, Light, Medium));
        axioms.add(DifferentIndividuals(OffDry, Sweet));
        axioms.add(DifferentIndividuals(Red, Rose, White));
        //
        equivalentClasses(axioms);
        axioms.add(SymmetricObjectProperty(adjacentRegion));
        axioms.add(DataPropertyDomain(yearValue, VintageYear));
        disjointClasses(axioms);
        subclasses(axioms);
        axioms.add(DataPropertyRange(yearValue, df.getOWLDatatype(XSDVocabulary.POSITIVE_INTEGER)));
        axioms.add(TransitiveObjectProperty(locatedIn));
        axioms.add(InverseObjectProperties(hasMaker, producesWine));
        axioms.add(InverseObjectProperties(madeFromGrape, madeIntoWine));
        //
        axioms.add(ObjectPropertyDomain(adjacentRegion, Region));
        axioms.add(ObjectPropertyDomain(course, Meal));
        axioms.add(ObjectPropertyDomain(hasColor, Wine));
        axioms.add(ObjectPropertyDomain(hasDrink, MealCourse));
        axioms.add(ObjectPropertyDomain(hasFood, MealCourse));
        axioms.add(ObjectPropertyDomain(hasVintageYear, Vintage));
        axioms.add(ObjectPropertyDomain(hasWineDescriptor, Wine));
        axioms.add(ObjectPropertyDomain(locatedIn, df.getOWLThing()));
        axioms.add(ObjectPropertyDomain(madeFromFruit, ConsumableThing));
        axioms.add(ObjectPropertyDomain(madeFromGrape, Wine));
        //
        axioms.add(SubObjectPropertyOf(hasBody, hasWineDescriptor));
        axioms.add(SubObjectPropertyOf(hasColor, hasWineDescriptor));
        axioms.add(SubObjectPropertyOf(hasFlavor, hasWineDescriptor));
        axioms.add(SubObjectPropertyOf(hasSugar, hasWineDescriptor));
        axioms.add(SubObjectPropertyOf(madeFromGrape, madeFromFruit));
        axioms.add(DataPropertyAssertion(yearValue, Year1998,
            Literal("1998", df.getOWLDatatype(XSDVocabulary.POSITIVE_INTEGER))));
        axioms.add(AnnotationAssertion(df.getRDFSLabel(), Wine.getIRI(), Literal("vin", "fr")));
        axioms.add(AnnotationAssertion(df.getRDFSLabel(), Wine.getIRI(), Literal("wine", "en")));
        axioms.add(AnnotationAssertion(df.getRDFSComment(), WineDescriptor.getIRI(),
            Literal("Made WineDescriptor unionType of tastes and color")));
        classAssertions(axioms);
        objectPropertyAssertions(axioms);
    }

    String ns = "urn:wine:";
    OWLDataProperty yearValue = DataProperty(IRI.create(ns + "yearValue"));
    OWLObjectProperty hasMaker = ObjectProperty(IRI.create(ns + "hasMaker"));
    OWLObjectProperty hasFlavor = ObjectProperty(IRI.create(ns + "hasFlavor"));
    OWLObjectProperty hasSugar = ObjectProperty(IRI.create(ns + "hasSugar"));
    OWLObjectProperty hasBody = ObjectProperty(IRI.create(ns + "hasBody"));
    OWLObjectProperty locatedIn = ObjectProperty(IRI.create(ns + "locatedIn"));
    OWLObjectProperty madeFromFruit = ObjectProperty(IRI.create(ns + "madeFromFruit"));
    OWLObjectProperty madeFromGrape = ObjectProperty(IRI.create(ns + "madeFromGrape"));
    OWLObjectProperty course = ObjectProperty(IRI.create(ns + "course"));
    OWLObjectProperty hasFood = ObjectProperty(IRI.create(ns + "hasFood"));
    OWLObjectProperty hasColor = ObjectProperty(IRI.create(ns + "hasColor"));
    OWLObjectProperty hasDrink = ObjectProperty(IRI.create(ns + "hasDrink"));
    OWLObjectProperty hasVintageYear = ObjectProperty(IRI.create(ns + "hasVintageYear"));
    OWLObjectProperty hasWineDescriptor = ObjectProperty(IRI.create(ns + "hasWineDescriptor"));
    OWLObjectProperty adjacentRegion = ObjectProperty(IRI.create(ns + "adjacentRegion"));
    OWLClass Pauillac = Class(IRI.create(ns + "Pauillac"));
    OWLClass CaliforniaWine = Class(IRI.create(ns + "CaliforniaWine"));
    OWLClass SweetDessertCourse = Class(IRI.create(ns + "SweetDessertCourse"));
    OWLClass DessertCourse = Class(IRI.create(ns + "DessertCourse"));
    OWLClass Margaux = Class(IRI.create(ns + "Margaux"));
    OWLClass ShellfishCourse = Class(IRI.create(ns + "ShellfishCourse"));
    OWLClass PinotBlanc = Class(IRI.create(ns + "PinotBlanc"));
    OWLClass CotesDOr = Class(IRI.create(ns + "CotesDOr"));
    OWLClass CheninBlanc = Class(IRI.create(ns + "CheninBlanc"));
    OWLClass OtherTomatoBasedFoodCourse = Class(IRI.create(ns + "OtherTomatoBasedFoodCourse"));
    OWLClass SweetWine = Class(IRI.create(ns + "SweetWine"));
    OWLClass Anjou = Class(IRI.create(ns + "Anjou"));
    OWLClass DryRedWine = Class(IRI.create(ns + "DryRedWine"));
    OWLClass WhiteLoire = Class(IRI.create(ns + "WhiteLoire"));
    OWLClass Meursault = Class(IRI.create(ns + "Meursault"));
    OWLClass RoseWine = Class(IRI.create(ns + "RoseWine"));
    OWLClass FullBodiedWine = Class(IRI.create(ns + "FullBodiedWine"));
    OWLClass AlsatianWine = Class(IRI.create(ns + "AlsatianWine"));
    OWLClass TableWine = Class(IRI.create(ns + "TableWine"));
    OWLClass GermanWine = Class(IRI.create(ns + "GermanWine"));
    OWLClass CabernetSauvignon = Class(IRI.create(ns + "CabernetSauvignon"));
    OWLClass NonOysterShellfishCourse = Class(IRI.create(ns + "NonOysterShellfishCourse"));
    OWLClass WhiteWine = Class(IRI.create(ns + "WhiteWine"));
    OWLClass RedMeatCourse = Class(IRI.create(ns + "RedMeatCourse"));
    OWLClass RedTableWine = Class(IRI.create(ns + "RedTableWine"));
    OWLClass Burgundy = Class(IRI.create(ns + "Burgundy"));
    OWLClass SeafoodCourse = Class(IRI.create(ns + "SeafoodCourse"));
    OWLClass Seafood = Class(IRI.create(ns + "Seafood"));
    OWLClass NonBlandFishCourse = Class(IRI.create(ns + "NonBlandFishCourse"));
    OWLClass WineColor = Class(IRI.create(ns + "WineColor"));
    OWLClass WineDescriptor = Class(IRI.create(ns + "WineDescriptor"));
    OWLClass SemillonOrSauvignonBlanc = Class(IRI.create(ns + "SemillonOrSauvignonBlanc"));
    OWLClass StEmilion = Class(IRI.create(ns + "StEmilion"));
    OWLClass WineSugar = Class(IRI.create(ns + "WineSugar"));
    OWLClass Tours = Class(IRI.create(ns + "Tours"));
    OWLClass IceWine = Class(IRI.create(ns + "IceWine"));
    OWLClass Medoc = Class(IRI.create(ns + "Medoc"));
    OWLClass SweetRiesling = Class(IRI.create(ns + "SweetRiesling"));
    OWLClass PastaWithHeavyCreamCourse = Class(IRI.create(ns + "PastaWithHeavyCreamCourse"));
    OWLClass WineFlavor = Class(IRI.create(ns + "WineFlavor"));
    OWLClass RedBurgundy = Class(IRI.create(ns + "RedBurgundy"));
    OWLClass ItalianWine = Class(IRI.create(ns + "ItalianWine"));
    OWLClass WhiteBurgundy = Class(IRI.create(ns + "WhiteBurgundy"));
    OWLClass PinotNoir = Class(IRI.create(ns + "PinotNoir"));
    OWLClass LightMeatFowlCourse = Class(IRI.create(ns + "LightMeatFowlCourse"));
    OWLClass NonSweetFruitCourse = Class(IRI.create(ns + "NonSweetFruitCourse"));
    OWLClass Zinfandel = Class(IRI.create(ns + "Zinfandel"));
    OWLClass WhiteNonSweetWine = Class(IRI.create(ns + "WhiteNonSweetWine"));
    OWLClass SpicyRedMeatCourse = Class(IRI.create(ns + "SpicyRedMeatCourse"));
    OWLClass DryRiesling = Class(IRI.create(ns + "DryRiesling"));
    OWLClass PastaWithSpicyRedSauceCourse = Class(IRI.create(ns + "PastaWithSpicyRedSauceCourse"));
    OWLClass WineBody = Class(IRI.create(ns + "WineBody"));
    OWLClass NonRedMeatCourse = Class(IRI.create(ns + "NonRedMeatCourse"));
    OWLClass NonSpicyRedMeatCourse = Class(IRI.create(ns + "NonSpicyRedMeatCourse"));
    OWLClass Muscadet = Class(IRI.create(ns + "Muscadet"));
    OWLClass Beaujolais = Class(IRI.create(ns + "Beaujolais"));
    OWLClass SauvignonBlanc = Class(IRI.create(ns + "SauvignonBlanc"));
    OWLClass PastaWithLightCreamCourse = Class(IRI.create(ns + "PastaWithLightCreamCourse"));
    OWLClass AmericanWine = Class(IRI.create(ns + "AmericanWine"));
    OWLClass OysterShellfishCourse = Class(IRI.create(ns + "OysterShellfishCourse"));
    OWLClass Chardonnay = Class(IRI.create(ns + "Chardonnay"));
    OWLClass FrenchWine = Class(IRI.create(ns + "FrenchWine"));
    OWLClass NonConsumableThing = Class(IRI.create(ns + "NonConsumableThing"));
    OWLClass WhiteTableWine = Class(IRI.create(ns + "WhiteTableWine"));
    OWLClass PastaWithNonSpicyRedSauceCourse = Class(IRI.create(ns + "PastaWithNonSpicyRedSauceCourse"));
    OWLClass Meritage = Class(IRI.create(ns + "Meritage"));
    OWLClass Riesling = Class(IRI.create(ns + "Riesling"));
    OWLClass RedBordeaux = Class(IRI.create(ns + "RedBordeaux"));
    OWLClass RedWine = Class(IRI.create(ns + "RedWine"));
    OWLClass FruitCourse = Class(IRI.create(ns + "FruitCourse"));
    OWLClass CabernetFranc = Class(IRI.create(ns + "CabernetFranc"));
    OWLClass Gamay = Class(IRI.create(ns + "Gamay"));
    OWLClass Fruit = Class(IRI.create(ns + "Fruit"));
    OWLClass Merlot = Class(IRI.create(ns + "Merlot"));
    OWLClass CheeseNutsDessertCourse = Class(IRI.create(ns + "CheeseNutsDessertCourse"));
    OWLClass Bordeaux = Class(IRI.create(ns + "Bordeaux"));
    OWLClass DryWine = Class(IRI.create(ns + "DryWine"));
    OWLClass WhiteBordeaux = Class(IRI.create(ns + "WhiteBordeaux"));
    OWLClass DryWhiteWine = Class(IRI.create(ns + "DryWhiteWine"));
    OWLClass Sancerre = Class(IRI.create(ns + "Sancerre"));
    OWLClass FishCourse = Class(IRI.create(ns + "FishCourse"));
    OWLClass TexasWine = Class(IRI.create(ns + "TexasWine"));
    OWLClass SweetFruitCourse = Class(IRI.create(ns + "SweetFruitCourse"));
    OWLClass Loire = Class(IRI.create(ns + "Loire"));
    OWLClass Semillon = Class(IRI.create(ns + "Semillon"));
    OWLClass DarkMeatFowlCourse = Class(IRI.create(ns + "DarkMeatFowlCourse"));
    OWLClass PetiteSyrah = Class(IRI.create(ns + "PetiteSyrah"));
    OWLClass BlandFishCourse = Class(IRI.create(ns + "BlandFishCourse"));
    OWLClass Wine = Class(IRI.create(ns + "Wine"));
    OWLClass PotableLiquid = Class(IRI.create(ns + "PotableLiquid"));
    OWLClass VintageYear = Class(IRI.create(ns + "VintageYear"));
    OWLClass MealCourse = Class(IRI.create(ns + "MealCourse"));
    OWLClass EdibleThing = Class(IRI.create(ns + "EdibleThing"));
    OWLClass WineGrape = Class(IRI.create(ns + "WineGrape"));
    OWLClass Region = Class(IRI.create(ns + "Region"));
    OWLNamedIndividual PauillacRegion = NamedIndividual(IRI.create(ns + "PauillacRegion"));
    OWLNamedIndividual CaliforniaRegion = NamedIndividual(IRI.create(ns + "CaliforniaRegion"));
    OWLClass SweetDessert = Class(IRI.create(ns + "SweetDessert"));
    OWLNamedIndividual Sweet = NamedIndividual(IRI.create(ns + "Sweet"));
    OWLClass Dessert = Class(IRI.create(ns + "Dessert"));
    OWLNamedIndividual MargauxRegion = NamedIndividual(IRI.create(ns + "MargauxRegion"));
    OWLClass Shellfish = Class(IRI.create(ns + "Shellfish"));
    OWLNamedIndividual PinotBlancGrape = NamedIndividual(IRI.create(ns + "PinotBlancGrape"));
    OWLNamedIndividual CotesDOrRegion = NamedIndividual(IRI.create(ns + "CotesDOrRegion"));
    OWLNamedIndividual CheninBlancGrape = NamedIndividual(IRI.create(ns + "CheninBlancGrape"));
    OWLClass OtherTomatoBasedFood = Class(IRI.create(ns + "OtherTomatoBasedFood"));
    OWLNamedIndividual AnjouRegion = NamedIndividual(IRI.create(ns + "AnjouRegion"));
    OWLNamedIndividual Rose = NamedIndividual(IRI.create(ns + "Rose"));
    OWLNamedIndividual SaucelitoCanyonZinfandel = NamedIndividual(IRI.create(ns + "SaucelitoCanyonZinfandel"));
    OWLNamedIndividual GaryFarrell = NamedIndividual(IRI.create(ns + "GaryFarrell"));
    OWLNamedIndividual Ventana = NamedIndividual(IRI.create(ns + "Ventana"));
    OWLNamedIndividual PinotNoirGrape = NamedIndividual(IRI.create(ns + "PinotNoirGrape"));
    OWLNamedIndividual EdnaValleyRegion = NamedIndividual(IRI.create(ns + "EdnaValleyRegion"));
    OWLNamedIndividual Taylor = NamedIndividual(IRI.create(ns + "Taylor"));
    OWLNamedIndividual Lobster = NamedIndividual(IRI.create(ns + "Lobster"));
    OWLClass Fowl = Class(IRI.create(ns + "Fowl"));
    OWLNamedIndividual PeterMccoyChardonnay = NamedIndividual(IRI.create(ns + "PeterMccoyChardonnay"));
    OWLNamedIndividual Steak = NamedIndividual(IRI.create(ns + "Steak"));
    OWLObjectProperty madeIntoWine = ObjectProperty(IRI.create(ns + "madeIntoWine"));
    OWLNamedIndividual Cheese = NamedIndividual(IRI.create(ns + "Cheese"));
    OWLNamedIndividual GamayGrape = NamedIndividual(IRI.create(ns + "GamayGrape"));
    OWLClass Winery = Class(IRI.create(ns + "Winery"));
    OWLNamedIndividual ClosDeLaPoussie = NamedIndividual(IRI.create(ns + "ClosDeLaPoussie"));
    OWLNamedIndividual Goose = NamedIndividual(IRI.create(ns + "Goose"));
    OWLClass Fish = Class(IRI.create(ns + "Fish"));
    OWLNamedIndividual Light = NamedIndividual(IRI.create(ns + "Light"));
    OWLNamedIndividual White = NamedIndividual(IRI.create(ns + "White"));
    OWLNamedIndividual PageMillWineryCabernetSauvignon = NamedIndividual(
        IRI.create(ns + "PageMillWineryCabernetSauvignon"));
    OWLNamedIndividual PetiteVerdotGrape = NamedIndividual(IRI.create(ns + "PetiteVerdotGrape"));
    OWLNamedIndividual Selaks = NamedIndividual(IRI.create(ns + "Selaks"));
    OWLNamedIndividual SantaBarbaraRegion = NamedIndividual(IRI.create(ns + "SantaBarbaraRegion"));
    OWLNamedIndividual McGuinnesso = NamedIndividual(IRI.create(ns + "McGuinnesso"));
    OWLNamedIndividual KathrynKennedy = NamedIndividual(IRI.create(ns + "KathrynKennedy"));
    OWLNamedIndividual Medium = NamedIndividual(IRI.create(ns + "Medium"));
    OWLNamedIndividual StEmilionRegion = NamedIndividual(IRI.create(ns + "StEmilionRegion"));
    OWLNamedIndividual Strong = NamedIndividual(IRI.create(ns + "Strong"));
    OWLNamedIndividual BordeauxRegion = NamedIndividual(IRI.create(ns + "BordeauxRegion"));
    OWLNamedIndividual DAnjou = NamedIndividual(IRI.create(ns + "DAnjou"));
    OWLNamedIndividual ChiantiClassico = NamedIndividual(IRI.create(ns + "ChiantiClassico"));
    OWLNamedIndividual ArroyoGrandeRegion = NamedIndividual(IRI.create(ns + "ArroyoGrandeRegion"));
    OWLNamedIndividual NapaRegion = NamedIndividual(IRI.create(ns + "NapaRegion"));
    OWLNamedIndividual SantaCruzMountainVineyardCabernetSauvignon = NamedIndividual(
        IRI.create(ns + "SantaCruzMountainVineyardCabernetSauvignon"));
    OWLNamedIndividual MountadamRiesling = NamedIndividual(IRI.create(ns + "MountadamRiesling"));
    OWLNamedIndividual ClosDeVougeotCotesDOr = NamedIndividual(IRI.create(ns + "ClosDeVougeotCotesDOr"));
    OWLNamedIndividual CentralTexasRegion = NamedIndividual(IRI.create(ns + "CentralTexasRegion"));
    OWLNamedIndividual Handley = NamedIndividual(IRI.create(ns + "Handley"));
    OWLNamedIndividual SancerreRegion = NamedIndividual(IRI.create(ns + "SancerreRegion"));
    OWLNamedIndividual Bancroft = NamedIndividual(IRI.create(ns + "Bancroft"));
    OWLNamedIndividual ChiantiRegion = NamedIndividual(IRI.create(ns + "ChiantiRegion"));
    OWLNamedIndividual Red = NamedIndividual(IRI.create(ns + "Red"));
    OWLNamedIndividual Foxen = NamedIndividual(IRI.create(ns + "Foxen"));
    OWLNamedIndividual ChateauDYchemSauterne = NamedIndividual(IRI.create(ns + "ChateauDYchemSauterne"));
    OWLClass ConsumableThing = Class(IRI.create(ns + "ConsumableThing"));
    OWLClass Juice = Class(IRI.create(ns + "Juice"));
    OWLClass BlandFish = Class(IRI.create(ns + "BlandFish"));
    OWLClass PastaWithLightCreamSauce = Class(IRI.create(ns + "PastaWithLightCreamSauce"));
    OWLClass Chianti = Class(IRI.create(ns + "Chianti"));
    OWLNamedIndividual PulignyMontrachet = NamedIndividual(IRI.create(ns + "PulignyMontrachet"));
    OWLNamedIndividual GarlickyRoast = NamedIndividual(IRI.create(ns + "GarlickyRoast"));
    OWLNamedIndividual USRegion = NamedIndividual(IRI.create(ns + "USRegion"));
    OWLNamedIndividual CongressSpringsSemillon = NamedIndividual(IRI.create(ns + "CongressSpringsSemillon"));
    OWLNamedIndividual Halibut = NamedIndividual(IRI.create(ns + "Halibut"));
    OWLNamedIndividual SchlossVolrad = NamedIndividual(IRI.create(ns + "SchlossVolrad"));
    OWLNamedIndividual PeterMccoy = NamedIndividual(IRI.create(ns + "PeterMccoy"));
    OWLNamedIndividual Marietta = NamedIndividual(IRI.create(ns + "Marietta"));
    OWLNamedIndividual WhitehallLane = NamedIndividual(IRI.create(ns + "WhitehallLane"));
    OWLNamedIndividual MalbecGrape = NamedIndividual(IRI.create(ns + "MalbecGrape"));
    OWLNamedIndividual Turkey = NamedIndividual(IRI.create(ns + "Turkey"));
    OWLNamedIndividual MountEdenVineyardEdnaValleyChardonnay = NamedIndividual(
        IRI.create(ns + "MountEdenVineyardEdnaValleyChardonnay"));
    OWLNamedIndividual CortonMontrachet = NamedIndividual(IRI.create(ns + "CortonMontrachet"));
    OWLNamedIndividual MariettaZinfandel = NamedIndividual(IRI.create(ns + "MariettaZinfandel"));
    OWLNamedIndividual MountadamChardonnay = NamedIndividual(IRI.create(ns + "MountadamChardonnay"));
    OWLNamedIndividual MountadamPinotNoir = NamedIndividual(IRI.create(ns + "MountadamPinotNoir"));
    OWLNamedIndividual MariettaCabernetSauvignon = NamedIndividual(IRI.create(ns + "MariettaCabernetSauvignon"));
    OWLNamedIndividual ChateauDYchem = NamedIndividual(IRI.create(ns + "ChateauDYchem"));
    OWLClass Meal = Class(IRI.create(ns + "Meal"));
    OWLClass NonSpicyRedMeat = Class(IRI.create(ns + "NonSpicyRedMeat"));
    OWLClass OysterShellfish = Class(IRI.create(ns + "OysterShellfish"));
    OWLNamedIndividual CentralCoastRegion = NamedIndividual(IRI.create(ns + "CentralCoastRegion"));
    OWLNamedIndividual ChateauLafiteRothschildPauillac = NamedIndividual(
        IRI.create(ns + "ChateauLafiteRothschildPauillac"));
    OWLClass PastaWithRedSauce = Class(IRI.create(ns + "PastaWithRedSauce"));
    OWLNamedIndividual Bananas = NamedIndividual(IRI.create(ns + "Bananas"));
    OWLClass DarkMeatFowl = Class(IRI.create(ns + "DarkMeatFowl"));
    OWLNamedIndividual Cotturi = NamedIndividual(IRI.create(ns + "Cotturi"));
    OWLNamedIndividual ChateauDeMeursault = NamedIndividual(IRI.create(ns + "ChateauDeMeursault"));
    OWLClass NonSweetFruit = Class(IRI.create(ns + "NonSweetFruit"));
    OWLNamedIndividual LongridgeMerlot = NamedIndividual(IRI.create(ns + "LongridgeMerlot"));
    OWLNamedIndividual FoxenCheninBlanc = NamedIndividual(IRI.create(ns + "FoxenCheninBlanc"));
    OWLNamedIndividual MendocinoRegion = NamedIndividual(IRI.create(ns + "MendocinoRegion"));
    OWLNamedIndividual CorbansSauvignonBlanc = NamedIndividual(IRI.create(ns + "CorbansSauvignonBlanc"));
    OWLNamedIndividual Dry = NamedIndividual(IRI.create(ns + "Dry"));
    OWLNamedIndividual CabernetFrancGrape = NamedIndividual(IRI.create(ns + "CabernetFrancGrape"));
    OWLNamedIndividual FettucineAlfRedo = NamedIndividual(IRI.create(ns + "FettucineAlfRedo"));
    OWLNamedIndividual CortonMontrachetWhiteBurgundy = NamedIndividual(
        IRI.create(ns + "CortonMontrachetWhiteBurgundy"));
    OWLNamedIndividual LaneTanner = NamedIndividual(IRI.create(ns + "LaneTanner"));
    OWLNamedIndividual CongressSprings = NamedIndividual(IRI.create(ns + "CongressSprings"));
    OWLNamedIndividual WhitehallLaneCabernetFranc = NamedIndividual(IRI.create(ns + "WhitehallLaneCabernetFranc"));
    OWLClass NonRedMeat = Class(IRI.create(ns + "NonRedMeat"));
    OWLNamedIndividual FraDiavolo = NamedIndividual(IRI.create(ns + "FraDiavolo"));
    OWLNamedIndividual WhitehallLanePrimavera = NamedIndividual(IRI.create(ns + "WhitehallLanePrimavera"));
    OWLNamedIndividual Nuts = NamedIndividual(IRI.create(ns + "Nuts"));
    OWLClass SpicyRedMeat = Class(IRI.create(ns + "SpicyRedMeat"));
    OWLNamedIndividual Delicate = NamedIndividual(IRI.create(ns + "Delicate"));
    OWLNamedIndividual ChateauMorgon = NamedIndividual(IRI.create(ns + "ChateauMorgon"));
    OWLNamedIndividual PastaWithWhiteClamSauce = NamedIndividual(IRI.create(ns + "PastaWithWhiteClamSauce"));
    OWLNamedIndividual MountEdenVineyard = NamedIndividual(IRI.create(ns + "MountEdenVineyard"));
    OWLNamedIndividual SchlossRothermelTrochenbierenausleseRiesling = NamedIndividual(
        IRI.create(ns + "SchlossRothermelTrochenbierenausleseRiesling"));
    OWLClass Port = Class(IRI.create(ns + "Port"));
    OWLNamedIndividual ChateauLafiteRothschild = NamedIndividual(IRI.create(ns + "ChateauLafiteRothschild"));
    OWLClass Vintage = Class(IRI.create(ns + "Vintage"));
    OWLNamedIndividual Duck = NamedIndividual(IRI.create(ns + "Duck"));
    OWLNamedIndividual SevreEtMaine = NamedIndividual(IRI.create(ns + "SevreEtMaine"));
    OWLNamedIndividual Year1998 = NamedIndividual(IRI.create(ns + "Year1998"));
    OWLNamedIndividual MeursaultRegion = NamedIndividual(IRI.create(ns + "MeursaultRegion"));
    OWLNamedIndividual ChateauMargaux = NamedIndividual(IRI.create(ns + "ChateauMargaux"));
    OWLNamedIndividual SchlossVolradTrochenbierenausleseRiesling = NamedIndividual(
        IRI.create(ns + "SchlossVolradTrochenbierenausleseRiesling"));
    OWLNamedIndividual SpaghettiWithTomatoSauce = NamedIndividual(IRI.create(ns + "SpaghettiWithTomatoSauce"));
    OWLNamedIndividual PortugalRegion = NamedIndividual(IRI.create(ns + "PortugalRegion"));
    OWLObjectProperty producesWine = ObjectProperty(IRI.create(ns + "producesWine"));
    OWLClass LightMeatFowl = Class(IRI.create(ns + "LightMeatFowl"));
    OWLClass Meat = Class(IRI.create(ns + "Meat"));
    OWLNamedIndividual ElyseZinfandel = NamedIndividual(IRI.create(ns + "ElyseZinfandel"));
    OWLNamedIndividual BourgogneRegion = NamedIndividual(IRI.create(ns + "BourgogneRegion"));
    OWLNamedIndividual MerlotGrape = NamedIndividual(IRI.create(ns + "MerlotGrape"));
    OWLNamedIndividual MountEdenVineyardEstatePinotNoir = NamedIndividual(
        IRI.create(ns + "MountEdenVineyardEstatePinotNoir"));
    OWLNamedIndividual KalinCellarsSemillon = NamedIndividual(IRI.create(ns + "KalinCellarsSemillon"));
    OWLNamedIndividual KalinCellars = NamedIndividual(IRI.create(ns + "KalinCellars"));
    OWLNamedIndividual LoireRegion = NamedIndividual(IRI.create(ns + "LoireRegion"));
    OWLClass RedMeat = Class(IRI.create(ns + "RedMeat"));
    OWLNamedIndividual StonleighSauvignonBlanc = NamedIndividual(IRI.create(ns + "StonleighSauvignonBlanc"));
    OWLNamedIndividual LaneTannerPinotNoir = NamedIndividual(IRI.create(ns + "LaneTannerPinotNoir"));
    OWLNamedIndividual Stonleigh = NamedIndividual(IRI.create(ns + "Stonleigh"));
    OWLNamedIndividual Corbans = NamedIndividual(IRI.create(ns + "Corbans"));
    OWLNamedIndividual BancroftChardonnay = NamedIndividual(IRI.create(ns + "BancroftChardonnay"));
    OWLNamedIndividual StGenevieve = NamedIndividual(IRI.create(ns + "StGenevieve"));
    OWLNamedIndividual FrenchRegion = NamedIndividual(IRI.create(ns + "FrenchRegion"));
    OWLClass NonBlandFish = Class(IRI.create(ns + "NonBlandFish"));
    OWLNamedIndividual MuscadetRegion = NamedIndividual(IRI.create(ns + "MuscadetRegion"));
    OWLClass PastaWithWhiteSauce = Class(IRI.create(ns + "PastaWithWhiteSauce"));
    OWLNamedIndividual StGenevieveTexasWhite = NamedIndividual(IRI.create(ns + "StGenevieveTexasWhite"));
    OWLNamedIndividual ChardonnayGrape = NamedIndividual(IRI.create(ns + "ChardonnayGrape"));
    OWLNamedIndividual SauvignonBlancGrape = NamedIndividual(IRI.create(ns + "SauvignonBlancGrape"));
    OWLNamedIndividual Flounder = NamedIndividual(IRI.create(ns + "Flounder"));
    OWLNamedIndividual SaucelitoCanyon = NamedIndividual(IRI.create(ns + "SaucelitoCanyon"));
    OWLNamedIndividual Beringer = NamedIndividual(IRI.create(ns + "Beringer"));
    OWLNamedIndividual Longridge = NamedIndividual(IRI.create(ns + "Longridge"));
    OWLNamedIndividual SeanThackrey = NamedIndividual(IRI.create(ns + "SeanThackrey"));
    OWLNamedIndividual Tuna = NamedIndividual(IRI.create(ns + "Tuna"));
    OWLNamedIndividual SantaCruzMountainsRegion = NamedIndividual(IRI.create(ns + "SantaCruzMountainsRegion"));
    OWLClass LateHarvest = Class(IRI.create(ns + "LateHarvest"));
    OWLNamedIndividual FormanChardonnay = NamedIndividual(IRI.create(ns + "FormanChardonnay"));
    OWLNamedIndividual ClosDeLaPoussieSancerre = NamedIndividual(IRI.create(ns + "ClosDeLaPoussieSancerre"));
    OWLNamedIndividual CotturiZinfandel = NamedIndividual(IRI.create(ns + "CotturiZinfandel"));
    OWLNamedIndividual Mountadam = NamedIndividual(IRI.create(ns + "Mountadam"));
    OWLNamedIndividual ChateauMargauxWinery = NamedIndividual(IRI.create(ns + "ChateauMargauxWinery"));
    OWLNamedIndividual BeaujolaisRegion = NamedIndividual(IRI.create(ns + "BeaujolaisRegion"));
    OWLNamedIndividual ChateauChevalBlanc = NamedIndividual(IRI.create(ns + "ChateauChevalBlanc"));
    OWLNamedIndividual ChateauMorgonBeaujolais = NamedIndividual(IRI.create(ns + "ChateauMorgonBeaujolais"));
    OWLNamedIndividual ChateauChevalBlancStEmilion = NamedIndividual(IRI.create(ns + "ChateauChevalBlancStEmilion"));
    OWLNamedIndividual PetiteSyrahGrape = NamedIndividual(IRI.create(ns + "PetiteSyrahGrape"));
    OWLClass NonOysterShellfish = Class(IRI.create(ns + "NonOysterShellfish"));
    OWLNamedIndividual SonomaRegion = NamedIndividual(IRI.create(ns + "SonomaRegion"));
    OWLNamedIndividual AustralianRegion = NamedIndividual(IRI.create(ns + "AustralianRegion"));
    OWLNamedIndividual TaylorPort = NamedIndividual(IRI.create(ns + "TaylorPort"));
    OWLNamedIndividual VentanaCheninBlanc = NamedIndividual(IRI.create(ns + "VentanaCheninBlanc"));
    OWLNamedIndividual TexasRegion = NamedIndividual(IRI.create(ns + "TexasRegion"));
    OWLClass Sauterne = Class(IRI.create(ns + "Sauterne"));
    OWLNamedIndividual SemillonGrape = NamedIndividual(IRI.create(ns + "SemillonGrape"));
    OWLNamedIndividual MariettaOldVinesRed = NamedIndividual(IRI.create(ns + "MariettaOldVinesRed"));
    OWLNamedIndividual Cake = NamedIndividual(IRI.create(ns + "Cake"));
    OWLNamedIndividual Forman = NamedIndividual(IRI.create(ns + "Forman"));
    OWLNamedIndividual CorbansPrivateBinSauvignonBlanc = NamedIndividual(
        IRI.create(ns + "CorbansPrivateBinSauvignonBlanc"));
    OWLNamedIndividual SelaksSauvignonBlanc = NamedIndividual(IRI.create(ns + "SelaksSauvignonBlanc"));
    OWLClass EatingGrape = Class(IRI.create(ns + "EatingGrape"));
    OWLNamedIndividual ClosDeVougeot = NamedIndividual(IRI.create(ns + "ClosDeVougeot"));
    OWLNamedIndividual SchlossRothermel = NamedIndividual(IRI.create(ns + "SchlossRothermel"));
    OWLClass SweetFruit = Class(IRI.create(ns + "SweetFruit"));
    OWLNamedIndividual BeefCurry = NamedIndividual(IRI.create(ns + "BeefCurry"));
    OWLClass PastaWithNonSpicyRedSauce = Class(IRI.create(ns + "PastaWithNonSpicyRedSauce"));
    OWLNamedIndividual RieslingGrape = NamedIndividual(IRI.create(ns + "RieslingGrape"));
    OWLNamedIndividual Chicken = NamedIndividual(IRI.create(ns + "Chicken"));
    OWLNamedIndividual OffDry = NamedIndividual(IRI.create(ns + "OffDry"));
    OWLClass CheeseNutsDessert = Class(IRI.create(ns + "CheeseNutsDessert"));
    OWLNamedIndividual SangioveseGrape = NamedIndividual(IRI.create(ns + "SangioveseGrape"));
    OWLNamedIndividual FormanCabernetSauvignon = NamedIndividual(IRI.create(ns + "FormanCabernetSauvignon"));
    OWLClass PastaWithHeavyCreamSauce = Class(IRI.create(ns + "PastaWithHeavyCreamSauce"));
    OWLNamedIndividual KathrynKennedyLateral = NamedIndividual(IRI.create(ns + "KathrynKennedyLateral"));
    OWLNamedIndividual CabernetSauvignonGrape = NamedIndividual(IRI.create(ns + "CabernetSauvignonGrape"));
    OWLNamedIndividual Swordfish = NamedIndividual(IRI.create(ns + "Swordfish"));
    OWLNamedIndividual Pizza = NamedIndividual(IRI.create(ns + "Pizza"));
    OWLNamedIndividual Full = NamedIndividual(IRI.create(ns + "Full"));
    OWLNamedIndividual CorbansDryWhiteRiesling = NamedIndividual(IRI.create(ns + "CorbansDryWhiteRiesling"));
    OWLNamedIndividual ThompsonSeedless = NamedIndividual(IRI.create(ns + "ThompsonSeedless"));
    OWLNamedIndividual ZinfandelGrape = NamedIndividual(IRI.create(ns + "ZinfandelGrape"));
    OWLClass EarlyHarvest = Class(IRI.create(ns + "EarlyHarvest"));
    OWLNamedIndividual MedocRegion = NamedIndividual(IRI.create(ns + "MedocRegion"));
    OWLNamedIndividual Peaches = NamedIndividual(IRI.create(ns + "Peaches"));
    OWLNamedIndividual SeanThackreySiriusPetiteSyrah = NamedIndividual(
        IRI.create(ns + "SeanThackreySiriusPetiteSyrah"));
    OWLNamedIndividual GaryFarrellMerlot = NamedIndividual(IRI.create(ns + "GaryFarrellMerlot"));
    OWLNamedIndividual SelaksIceWine = NamedIndividual(IRI.create(ns + "SelaksIceWine"));
    OWLNamedIndividual ItalianRegion = NamedIndividual(IRI.create(ns + "ItalianRegion"));
    OWLClass PastaWithSpicyRedSauce = Class(IRI.create(ns + "PastaWithSpicyRedSauce"));
    OWLNamedIndividual Scrod = NamedIndividual(IRI.create(ns + "Scrod"));
    OWLNamedIndividual Oysters = NamedIndividual(IRI.create(ns + "Oysters"));
    OWLNamedIndividual Crab = NamedIndividual(IRI.create(ns + "Crab"));
    OWLClass Grape = Class(IRI.create(ns + "Grape"));
    OWLNamedIndividual Veal = NamedIndividual(IRI.create(ns + "Veal"));
    OWLNamedIndividual MixedFruit = NamedIndividual(IRI.create(ns + "MixedFruit"));
    OWLNamedIndividual SaucelitoCanyonZinfandel1998 = NamedIndividual(IRI.create(ns + "SaucelitoCanyonZinfandel1998"));
    OWLNamedIndividual NewZealandRegion = NamedIndividual(IRI.create(ns + "NewZealandRegion"));
    OWLNamedIndividual MariettaPetiteSyrah = NamedIndividual(IRI.create(ns + "MariettaPetiteSyrah"));
    OWLNamedIndividual GermanyRegion = NamedIndividual(IRI.create(ns + "GermanyRegion"));
    OWLNamedIndividual Mussels = NamedIndividual(IRI.create(ns + "Mussels"));
    OWLNamedIndividual Pie = NamedIndividual(IRI.create(ns + "Pie"));
    OWLNamedIndividual ToursRegion = NamedIndividual(IRI.create(ns + "ToursRegion"));
    OWLNamedIndividual Moderate = NamedIndividual(IRI.create(ns + "Moderate"));
    OWLClass WineTaste = Class(IRI.create(ns + "WineTaste"));
    OWLNamedIndividual Pork = NamedIndividual(IRI.create(ns + "Pork"));
    OWLNamedIndividual SevreEtMaineMuscadet = NamedIndividual(IRI.create(ns + "SevreEtMaineMuscadet"));
    OWLNamedIndividual RoseDAnjou = NamedIndividual(IRI.create(ns + "RoseDAnjou"));
    OWLNamedIndividual PulignyMontrachetWhiteBurgundy = NamedIndividual(
        IRI.create(ns + "PulignyMontrachetWhiteBurgundy"));
    OWLNamedIndividual AlsaceRegion = NamedIndividual(IRI.create(ns + "AlsaceRegion"));
    OWLNamedIndividual SauterneRegion = NamedIndividual(IRI.create(ns + "SauterneRegion"));
    OWLNamedIndividual SantaCruzMountainVineyard = NamedIndividual(IRI.create(ns + "SantaCruzMountainVineyard"));
    OWLNamedIndividual RoastBeef = NamedIndividual(IRI.create(ns + "RoastBeef"));
    OWLNamedIndividual Clams = NamedIndividual(IRI.create(ns + "Clams"));
    OWLNamedIndividual PageMillWinery = NamedIndividual(IRI.create(ns + "PageMillWinery"));
    OWLNamedIndividual Elyse = NamedIndividual(IRI.create(ns + "Elyse"));
    OWLNamedIndividual SouthAustraliaRegion = NamedIndividual(IRI.create(ns + "SouthAustraliaRegion"));
    OWLNamedIndividual ChateauDeMeursaultMeursault = NamedIndividual(IRI.create(ns + "ChateauDeMeursaultMeursault"));
    OWLClass Pasta = Class(IRI.create(ns + "Pasta"));
    OWLClass DessertWine = Class(IRI.create(ns + "DessertWine"));

    private void declarations(Collection<OWLAxiom> axioms1) {
        List<OWLAxiom> axioms = new ArrayList<>();
        axioms.add(Declaration(AnjouRegion));
        axioms.add(Declaration(CaliforniaRegion));
        axioms.add(Declaration(SaucelitoCanyonZinfandel));
        axioms.add(Declaration(Merlot));
        axioms.add(Declaration(Sweet));
        axioms.add(Declaration(GaryFarrell));
        axioms.add(Declaration(WineBody));
        axioms.add(Declaration(Ventana));
        axioms.add(Declaration(PinotNoirGrape));
        axioms.add(Declaration(EdnaValleyRegion));
        axioms.add(Declaration(CabernetFranc));
        axioms.add(Declaration(Taylor));
        axioms.add(Declaration(WhiteBordeaux));
        axioms.add(Declaration(Lobster));
        axioms.add(Declaration(Fowl));
        axioms.add(Declaration(PeterMccoyChardonnay));
        axioms.add(Declaration(CheninBlanc));
        axioms.add(Declaration(Steak));
        axioms.add(Declaration(Rose));
        axioms.add(Declaration(WineColor));
        axioms.add(Declaration(madeIntoWine));
        axioms.add(Declaration(Cheese));
        axioms.add(Declaration(GamayGrape));
        axioms.add(Declaration(CabernetSauvignon));
        axioms.add(Declaration(Winery));
        axioms.add(Declaration(AmericanWine));
        axioms.add(Declaration(ClosDeLaPoussie));
        axioms.add(Declaration(Goose));
        axioms.add(Declaration(Fish));
        axioms.add(Declaration(NonRedMeatCourse));
        axioms.add(Declaration(PastaWithLightCreamCourse));
        axioms.add(Declaration(Light));
        axioms.add(Declaration(VintageYear));
        axioms.add(Declaration(hasBody));
        axioms.add(Declaration(White));
        axioms.add(Declaration(CaliforniaWine));
        axioms.add(Declaration(SauvignonBlanc));
        axioms.add(Declaration(PageMillWineryCabernetSauvignon));
        axioms.add(Declaration(PetiteVerdotGrape));
        axioms.add(Declaration(Selaks));
        axioms.add(Declaration(SantaBarbaraRegion));
        axioms.add(Declaration(DessertCourse));
        axioms.add(Declaration(McGuinnesso));
        axioms.add(Declaration(KathrynKennedy));
        axioms.add(Declaration(WineSugar));
        axioms.add(Declaration(Medium));
        axioms.add(Declaration(StEmilionRegion));
        axioms.add(Declaration(Strong));
        axioms.add(Declaration(SweetWine));
        axioms.add(Declaration(TexasWine));
        axioms.add(Declaration(BordeauxRegion));
        axioms.add(Declaration(DAnjou));
        axioms.add(Declaration(Chianti));
        axioms.add(Declaration(hasDrink));
        axioms.add(Declaration(ArroyoGrandeRegion));
        axioms.add(Declaration(madeFromFruit));
        axioms.add(Declaration(WhiteNonSweetWine));
        axioms.add(Declaration(Burgundy));
        axioms.add(Declaration(NapaRegion));
        axioms.add(Declaration(PinotBlancGrape));
        axioms.add(Declaration(Meritage));
        axioms.add(Declaration(AlsatianWine));
        axioms.add(Declaration(SantaCruzMountainVineyardCabernetSauvignon));
        axioms.add(Declaration(MountadamRiesling));
        axioms.add(Declaration(hasFood));
        axioms.add(Declaration(WhiteWine));
        axioms.add(Declaration(ClosDeVougeotCotesDOr));
        axioms.add(Declaration(CentralTexasRegion));
        axioms.add(Declaration(Handley));
        axioms.add(Declaration(SancerreRegion));
        axioms.add(Declaration(Bancroft));
        axioms.add(Declaration(ChiantiRegion));
        axioms.add(Declaration(TableWine));
        axioms.add(Declaration(Red));
        axioms.add(Declaration(Foxen));
        axioms.add(Declaration(ChateauDYchemSauterne));
        axioms.add(Declaration(ConsumableThing));
        axioms.add(Declaration(Juice));
        axioms.add(Declaration(BlandFish));
        axioms.add(Declaration(GermanWine));
        axioms.add(Declaration(PastaWithLightCreamSauce));
        axioms.add(Declaration(course));
        axioms.add(Declaration(ChiantiClassico));
        axioms.add(Declaration(PulignyMontrachet));
        axioms.add(Declaration(GarlickyRoast));
        axioms.add(Declaration(USRegion));
        axioms.add(Declaration(CongressSpringsSemillon));
        axioms.add(Declaration(Halibut));
        axioms.add(Declaration(SchlossVolrad));
        axioms.add(Declaration(PeterMccoy));
        axioms.add(Declaration(Marietta));
        axioms.add(Declaration(hasMaker));
        axioms.add(Declaration(Seafood));
        axioms.add(Declaration(WhitehallLane));
        axioms.add(Declaration(WineFlavor));
        axioms.add(Declaration(PinotNoir));
        axioms.add(Declaration(BlandFishCourse));
        axioms.add(Declaration(OtherTomatoBasedFoodCourse));
        axioms.add(Declaration(MalbecGrape));
        axioms.add(Declaration(Turkey));
        axioms.add(Declaration(MountEdenVineyardEdnaValleyChardonnay));
        axioms.add(Declaration(CortonMontrachet));
        axioms.add(Declaration(MariettaZinfandel));
        axioms.add(Declaration(MountadamChardonnay));
        axioms.add(Declaration(Shellfish));
        axioms.add(Declaration(OysterShellfishCourse));
        axioms.add(Declaration(RedBordeaux));
        axioms.add(Declaration(MountadamPinotNoir));
        axioms.add(Declaration(MariettaCabernetSauvignon));
        axioms.add(Declaration(ChateauDYchem));
        axioms.add(Declaration(Meal));
        axioms.add(Declaration(NonSpicyRedMeat));
        axioms.add(Declaration(OysterShellfish));
        axioms.add(Declaration(NonSpicyRedMeatCourse));
        axioms.add(Declaration(CentralCoastRegion));
        axioms.add(Declaration(ChateauLafiteRothschildPauillac));
        axioms.add(Declaration(RoseWine));
        axioms.add(Declaration(PastaWithRedSauce));
        axioms.add(Declaration(Bananas));
        axioms.add(Declaration(DarkMeatFowl));
        axioms.add(Declaration(Cotturi));
        axioms.add(Declaration(ChateauDeMeursault));
        axioms.add(Declaration(SeafoodCourse));
        axioms.add(Declaration(NonSweetFruit));
        axioms.add(Declaration(RedBurgundy));
        axioms.add(Declaration(LongridgeMerlot));
        axioms.add(Declaration(FoxenCheninBlanc));
        axioms.add(Declaration(MendocinoRegion));
        axioms.add(Declaration(PotableLiquid));
        axioms.add(Declaration(CorbansSauvignonBlanc));
        axioms.add(Declaration(Dry));
        axioms.add(Declaration(CabernetFrancGrape));
        axioms.add(Declaration(FettucineAlfRedo));
        axioms.add(Declaration(CortonMontrachetWhiteBurgundy));
        axioms.add(Declaration(LaneTanner));
        axioms.add(Declaration(CongressSprings));
        axioms.add(Declaration(WhitehallLaneCabernetFranc));
        axioms.add(Declaration(NonRedMeat));
        axioms.add(Declaration(FraDiavolo));
        axioms.add(Declaration(SweetDessertCourse));
        axioms.add(Declaration(Wine));
        axioms.add(Declaration(WhitehallLanePrimavera));
        axioms.add(Declaration(Nuts));
        axioms.add(Declaration(SpicyRedMeat));
        axioms.add(Declaration(NonBlandFishCourse));
        axioms.add(Declaration(Delicate));
        axioms.add(Declaration(ChateauMorgon));
        axioms.add(Declaration(PastaWithWhiteClamSauce));
        axioms.add(Declaration(MountEdenVineyard));
        axioms.add(Declaration(NonOysterShellfishCourse));
        axioms.add(Declaration(SchlossRothermelTrochenbierenausleseRiesling));
        axioms.add(Declaration(Port));
        axioms.add(Declaration(Margaux));
        axioms.add(Declaration(ChateauLafiteRothschild));
        axioms.add(Declaration(hasWineDescriptor));
        axioms.add(Declaration(Vintage));
        axioms.add(Declaration(Duck));
        axioms.add(Declaration(SevreEtMaine));
        axioms.add(Declaration(Chardonnay));
        axioms.add(Declaration(Year1998));
        axioms.add(Declaration(MeursaultRegion));
        axioms.add(Declaration(FrenchWine));
        axioms.add(Declaration(PetiteSyrah));
        axioms.add(Declaration(ChateauMargaux));
        axioms.add(Declaration(SchlossVolradTrochenbierenausleseRiesling));
        axioms.add(Declaration(SpaghettiWithTomatoSauce));
        axioms.add(Declaration(MealCourse));
        axioms.add(Declaration(PortugalRegion));
        axioms.add(Declaration(hasColor));
        axioms.add(Declaration(producesWine));
        axioms.add(Declaration(LightMeatFowl));
        axioms.add(Declaration(Meat));
        axioms.add(Declaration(ElyseZinfandel));
        axioms.add(Declaration(BourgogneRegion));
        axioms.add(Declaration(RedTableWine));
        axioms.add(Declaration(MerlotGrape));
        axioms.add(Declaration(MountEdenVineyardEstatePinotNoir));
        axioms.add(Declaration(KalinCellarsSemillon));
        axioms.add(Declaration(KalinCellars));
        axioms.add(Declaration(Grape));
        axioms.add(Declaration(adjacentRegion));
        axioms.add(Declaration(WineGrape));
        axioms.add(Declaration(LoireRegion));
        axioms.add(Declaration(RedMeat));
        axioms.add(Declaration(StonleighSauvignonBlanc));
        axioms.add(Declaration(WhiteTableWine));
        axioms.add(Declaration(LaneTannerPinotNoir));
        axioms.add(Declaration(Stonleigh));
        axioms.add(Declaration(hasSugar));
        axioms.add(Declaration(Corbans));
        axioms.add(Declaration(BancroftChardonnay));
        axioms.add(Declaration(StGenevieve));
        axioms.add(Declaration(NonConsumableThing));
        axioms.add(Declaration(FrenchRegion));
        axioms.add(Declaration(NonBlandFish));
        axioms.add(Declaration(MuscadetRegion));
        axioms.add(Declaration(CotesDOrRegion));
        axioms.add(Declaration(Anjou));
        axioms.add(Declaration(PastaWithWhiteSauce));
        axioms.add(Declaration(PastaWithNonSpicyRedSauceCourse));
        axioms.add(Declaration(StGenevieveTexasWhite));
        axioms.add(Declaration(ChardonnayGrape));
        axioms.add(Declaration(SauvignonBlancGrape));
        axioms.add(Declaration(Flounder));
        axioms.add(Declaration(SaucelitoCanyon));
        axioms.add(Declaration(Beringer));
        axioms.add(Declaration(FishCourse));
        axioms.add(Declaration(Longridge));
        axioms.add(Declaration(SeanThackrey));
        axioms.add(Declaration(Tuna));
        axioms.add(Declaration(SantaCruzMountainsRegion));
        axioms.add(Declaration(PastaWithHeavyCreamCourse));
        axioms.add(Declaration(LateHarvest));
        axioms.add(Declaration(FormanChardonnay));
        axioms.add(Declaration(ClosDeLaPoussieSancerre));
        axioms.add(Declaration(CotturiZinfandel));
        axioms.add(Declaration(Mountadam));
        axioms.add(Declaration(ChateauMargauxWinery));
        axioms.add(Declaration(BeaujolaisRegion));
        axioms.add(Declaration(ChateauChevalBlanc));
        axioms.add(Declaration(ChateauMorgonBeaujolais));
        axioms.add(Declaration(ChateauChevalBlancStEmilion));
        axioms.add(Declaration(CotesDOr));
        axioms.add(Declaration(SemillonOrSauvignonBlanc));
        axioms.add(Declaration(PauillacRegion));
        axioms.add(Declaration(Zinfandel));
        axioms.add(Declaration(PetiteSyrahGrape));
        axioms.add(Declaration(NonOysterShellfish));
        axioms.add(Declaration(SonomaRegion));
        axioms.add(Declaration(AustralianRegion));
        axioms.add(Declaration(Fruit));
        axioms.add(Declaration(TaylorPort));
        axioms.add(Declaration(VentanaCheninBlanc));
        axioms.add(Declaration(TexasRegion));
        axioms.add(Declaration(CheninBlancGrape));
        axioms.add(Declaration(yearValue));
        axioms.add(Declaration(Sauterne));
        axioms.add(Declaration(WhiteBurgundy));
        axioms.add(Declaration(Pauillac));
        axioms.add(Declaration(OtherTomatoBasedFood));
        axioms.add(Declaration(SemillonGrape));
        axioms.add(Declaration(MariettaOldVinesRed));
        axioms.add(Declaration(Muscadet));
        axioms.add(Declaration(Cake));
        axioms.add(Declaration(Forman));
        axioms.add(Declaration(CorbansPrivateBinSauvignonBlanc));
        axioms.add(Declaration(SelaksSauvignonBlanc));
        axioms.add(Declaration(SweetFruitCourse));
        axioms.add(Declaration(Gamay));
        axioms.add(Declaration(NonSweetFruitCourse));
        axioms.add(Declaration(RedWine));
        axioms.add(Declaration(EatingGrape));
        axioms.add(Declaration(ClosDeVougeot));
        axioms.add(Declaration(SchlossRothermel));
        axioms.add(Declaration(SweetFruit));
        axioms.add(Declaration(Beaujolais));
        axioms.add(Declaration(BeefCurry));
        axioms.add(Declaration(PastaWithNonSpicyRedSauce));
        axioms.add(Declaration(DryWhiteWine));
        axioms.add(Declaration(RieslingGrape));
        axioms.add(Declaration(madeFromGrape));
        axioms.add(Declaration(DarkMeatFowlCourse));
        axioms.add(Declaration(Riesling));
        axioms.add(Declaration(WhiteLoire));
        axioms.add(Declaration(FullBodiedWine));
        axioms.add(Declaration(MargauxRegion));
        axioms.add(Declaration(Chicken));
        axioms.add(Declaration(OffDry));
        axioms.add(Declaration(CheeseNutsDessert));
        axioms.add(Declaration(DryRiesling));
        axioms.add(Declaration(SangioveseGrape));
        axioms.add(Declaration(Semillon));
        axioms.add(Declaration(FormanCabernetSauvignon));
        axioms.add(Declaration(PastaWithHeavyCreamSauce));
        axioms.add(Declaration(KathrynKennedyLateral));
        axioms.add(Declaration(CabernetSauvignonGrape));
        axioms.add(Declaration(ShellfishCourse));
        axioms.add(Declaration(Swordfish));
        axioms.add(Declaration(Pizza));
        axioms.add(Declaration(Loire));
        axioms.add(Declaration(Full));
        axioms.add(Declaration(Dessert));
        axioms.add(Declaration(CorbansDryWhiteRiesling));
        axioms.add(Declaration(SweetRiesling));
        axioms.add(Declaration(ThompsonSeedless));
        axioms.add(Declaration(ZinfandelGrape));
        axioms.add(Declaration(hasFlavor));
        axioms.add(Declaration(Sancerre));
        axioms.add(Declaration(EarlyHarvest));
        axioms.add(Declaration(MedocRegion));
        axioms.add(Declaration(Peaches));
        axioms.add(Declaration(PastaWithSpicyRedSauceCourse));
        axioms.add(Declaration(SeanThackreySiriusPetiteSyrah));
        axioms.add(Declaration(IceWine));
        axioms.add(Declaration(EdibleThing));
        axioms.add(Declaration(GaryFarrellMerlot));
        axioms.add(Declaration(Meursault));
        axioms.add(Declaration(SelaksIceWine));
        axioms.add(Declaration(ItalianRegion));
        axioms.add(Declaration(PastaWithSpicyRedSauce));
        axioms.add(Declaration(Scrod));
        axioms.add(Declaration(locatedIn));
        axioms.add(Declaration(Oysters));
        axioms.add(Declaration(hasVintageYear));
        axioms.add(Declaration(PinotBlanc));
        axioms.add(Declaration(Crab));
        axioms.add(Declaration(Tours));
        axioms.add(Declaration(SpicyRedMeatCourse));
        axioms.add(Declaration(FruitCourse));
        axioms.add(Declaration(Region));
        axioms.add(Declaration(DryRedWine));
        axioms.add(Declaration(Veal));
        axioms.add(Declaration(MixedFruit));
        axioms.add(Declaration(SaucelitoCanyonZinfandel1998));
        axioms.add(Declaration(NewZealandRegion));
        axioms.add(Declaration(LightMeatFowlCourse));
        axioms.add(Declaration(MariettaPetiteSyrah));
        axioms.add(Declaration(GermanyRegion));
        axioms.add(Declaration(Mussels));
        axioms.add(Declaration(Pie));
        axioms.add(Declaration(ItalianWine));
        axioms.add(Declaration(CheeseNutsDessertCourse));
        axioms.add(Declaration(ToursRegion));
        axioms.add(Declaration(Moderate));
        axioms.add(Declaration(WineTaste));
        axioms.add(Declaration(Pork));
        axioms.add(Declaration(SevreEtMaineMuscadet));
        axioms.add(Declaration(RoseDAnjou));
        axioms.add(Declaration(PulignyMontrachetWhiteBurgundy));
        axioms.add(Declaration(WineDescriptor));
        axioms.add(Declaration(AlsaceRegion));
        axioms.add(Declaration(DryWine));
        axioms.add(Declaration(RedMeatCourse));
        axioms.add(Declaration(SauterneRegion));
        axioms.add(Declaration(SantaCruzMountainVineyard));
        axioms.add(Declaration(Medoc));
        axioms.add(Declaration(RoastBeef));
        axioms.add(Declaration(Clams));
        axioms.add(Declaration(PageMillWinery));
        axioms.add(Declaration(Elyse));
        axioms.add(Declaration(SouthAustraliaRegion));
        axioms.add(Declaration(SweetDessert));
        axioms.add(Declaration(ChateauDeMeursaultMeursault));
        axioms.add(Declaration(Bordeaux));
        axioms.add(Declaration(Pasta));
        axioms.add(Declaration(StEmilion));
        axioms.add(Declaration(DessertWine));
        Collections.sort(axioms);
        axioms1.addAll(axioms);
    }

    private void disjointClasses(List<OWLAxiom> axioms) {
        axioms.add(DisjointClasses(MealCourse, PotableLiquid));
        axioms.add(DisjointClasses(Fish, Shellfish));
        axioms.add(DisjointClasses(DarkMeatFowl, LightMeatFowl));
        axioms.add(DisjointClasses(CheeseNutsDessert, SweetDessert));
        axioms.add(DisjointClasses(EarlyHarvest, LateHarvest));
        axioms.add(DisjointClasses(EdibleThing, PotableLiquid));
        axioms.add(DisjointClasses(Meat, Seafood));
        axioms.add(DisjointClasses(EdibleThing, Meal));
        axioms.add(DisjointClasses(Dessert, Pasta));
        axioms.add(DisjointClasses(NonOysterShellfish, OysterShellfish));
        axioms.add(DisjointClasses(Dessert, Fruit));
        axioms.add(DisjointClasses(NonRedMeat, RedMeat));
        axioms.add(DisjointClasses(Fruit, OtherTomatoBasedFood));
        axioms.add(DisjointClasses(Dessert, OtherTomatoBasedFood));
        axioms.add(DisjointClasses(Fruit, Seafood));
        axioms.add(DisjointClasses(Fruit, Pasta));
        axioms.add(DisjointClasses(NonSpicyRedMeat, SpicyRedMeat));
        axioms.add(DisjointClasses(Meal, PotableLiquid));
        axioms.add(DisjointClasses(Fruit, Meat));
        axioms.add(DisjointClasses(Fowl, Meat));
        axioms.add(DisjointClasses(PastaWithHeavyCreamSauce, PastaWithLightCreamSauce));
        axioms.add(DisjointClasses(OtherTomatoBasedFood, Seafood));
        axioms.add(DisjointClasses(Fowl, Pasta));
        axioms.add(DisjointClasses(Pasta, Seafood));
        axioms.add(DisjointClasses(PastaWithNonSpicyRedSauce, PastaWithSpicyRedSauce));
        axioms.add(DisjointClasses(Dessert, Seafood));
        axioms.add(DisjointClasses(Fowl, OtherTomatoBasedFood));
        axioms.add(DisjointClasses(EdibleThing, MealCourse));
        axioms.add(DisjointClasses(Fowl, Seafood));
        axioms.add(DisjointClasses(Meal, MealCourse));
        axioms.add(DisjointClasses(Fowl, Fruit));
        axioms.add(DisjointClasses(Meat, OtherTomatoBasedFood));
        axioms.add(DisjointClasses(OtherTomatoBasedFood, Pasta));
        axioms.add(DisjointClasses(Dessert, Fowl));
        axioms.add(DisjointClasses(Meat, Pasta));
        axioms.add(DisjointClasses(BlandFish, NonBlandFish));
        axioms.add(DisjointClasses(PastaWithRedSauce, PastaWithWhiteSauce));
        axioms.add(DisjointClasses(NonSweetFruit, SweetFruit));
        axioms.add(DisjointClasses(Dessert, Meat));
    }

    private void subclasses(List<OWLAxiom> axioms) {
        axioms.add(SubClassOf(Meal, all(course, MealCourse)));
        axioms.add(SubClassOf(Port, v(locatedIn, PortugalRegion)));
        axioms.add(SubClassOf(CheeseNutsDessertCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(Margaux, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(CabernetFranc, v(hasColor, Red)));
        axioms.add(SubClassOf(LightMeatFowlCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Sauterne, v(locatedIn, SauterneRegion)));
        axioms.add(SubClassOf(Tours, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(Grape, SweetFruit));
        axioms.add(SubClassOf(RedBurgundy, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(LateHarvest, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(Wine, PotableLiquid));
        axioms.add(SubClassOf(PetiteSyrah, v(hasColor, Red)));
        axioms.add(SubClassOf(CabernetFranc, v(hasSugar, Dry)));
        axioms.add(SubClassOf(CheninBlanc, v(hasFlavor, Moderate)));
        axioms.add(SubClassOf(OtherTomatoBasedFood, EdibleThing));
        axioms.add(SubClassOf(PinotBlanc, v(hasColor, White)));
        axioms.add(SubClassOf(PastaWithLightCreamCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(Sauterne, LateHarvest));
        axioms.add(SubClassOf(NonSpicyRedMeatCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(DessertCourse, all(hasDrink, v(hasSugar, Sweet))));
        axioms.add(SubClassOf(DessertWine, Wine));
        axioms.add(SubClassOf(PastaWithSpicyRedSauce, PastaWithRedSauce));
        axioms.add(SubClassOf(Zinfandel, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(PetiteSyrah, v(hasSugar, Dry)));
        axioms.add(SubClassOf(PastaWithNonSpicyRedSauceCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(OysterShellfish, Shellfish));
        axioms.add(SubClassOf(SweetRiesling, v(hasBody, Full)));
        axioms.add(SubClassOf(SweetFruitCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(StEmilion, v(hasColor, Red)));
        axioms.add(SubClassOf(Zinfandel, v(hasSugar, Dry)));
        axioms.add(SubClassOf(PastaWithHeavyCreamSauce, PastaWithWhiteSauce));
        axioms.add(SubClassOf(StEmilion, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(NonSpicyRedMeat, RedMeat));
        axioms.add(SubClassOf(RedMeatCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(SpicyRedMeatCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(DessertWine, all(hasSugar, ObjectOneOf(OffDry, Sweet))));
        axioms.add(SubClassOf(RedBurgundy, v(madeFromGrape, PinotNoirGrape)));
        axioms.add(SubClassOf(PastaWithHeavyCreamCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Sancerre, v(hasFlavor, Delicate)));
        axioms.add(SubClassOf(Anjou, v(hasFlavor, Delicate)));
        axioms.add(SubClassOf(DarkMeatFowlCourse, all(hasDrink, v(hasFlavor, Delicate))));
        axioms.add(SubClassOf(Meal, ObjectMinCardinality(1, course, df.getOWLThing())));
        axioms.add(SubClassOf(EatingGrape, Grape));
        axioms.add(SubClassOf(IceWine, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(DarkMeatFowl, Fowl));
        axioms.add(SubClassOf(Sauterne, v(hasColor, White)));
        axioms.add(SubClassOf(MealCourse, ObjectMinCardinality(1, hasDrink, df.getOWLThing())));
        axioms.add(SubClassOf(Wine, ObjectExactCardinality(1, hasFlavor, df.getOWLThing())));
        axioms.add(SubClassOf(NonOysterShellfishCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Zinfandel, v(hasColor, Red)));
        axioms.add(SubClassOf(DessertCourse, all(hasDrink, v(hasFlavor, Strong))));
        axioms.add(SubClassOf(MealCourse, ConsumableThing));
        axioms.add(SubClassOf(Fowl, EdibleThing));
        axioms.add(SubClassOf(PastaWithSpicyRedSauceCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Chardonnay, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(Muscadet, v(hasFlavor, Delicate)));
        axioms.add(SubClassOf(OtherTomatoBasedFoodCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Tours, v(madeFromGrape, CheninBlancGrape)));
        axioms.add(SubClassOf(CheeseNutsDessert, Dessert));
        axioms.add(SubClassOf(CheninBlanc, all(hasSugar, ObjectOneOf(Dry, OffDry))));
        axioms.add(SubClassOf(CotesDOr, v(hasFlavor, Moderate)));
        axioms.add(SubClassOf(NonRedMeatCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(SemillonOrSauvignonBlanc, v(hasColor, White)));
        axioms.add(SubClassOf(CheninBlanc, v(hasColor, White)));
        axioms.add(SubClassOf(Merlot, v(hasColor, Red)));
        axioms.add(SubClassOf(FishCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(NonBlandFishCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(Chianti, v(locatedIn, ChiantiRegion)));
        axioms.add(SubClassOf(Medoc, v(hasSugar, Dry)));
        axioms.add(SubClassOf(Meal, ConsumableThing));
        axioms.add(SubClassOf(SpicyRedMeatCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(PastaWithLightCreamCourse, all(hasDrink, v(hasFlavor, Delicate))));
        axioms.add(SubClassOf(DessertCourse, all(hasDrink, v(hasBody, Full))));
        axioms.add(SubClassOf(Sancerre, v(madeFromGrape, SauvignonBlancGrape)));
        axioms.add(SubClassOf(OtherTomatoBasedFoodCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(SpicyRedMeat, RedMeat));
        axioms.add(SubClassOf(Sancerre, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(Chianti, all(hasBody, ObjectOneOf(Light, Medium))));
        axioms.add(SubClassOf(Pasta, EdibleThing));
        axioms.add(SubClassOf(SpicyRedMeatCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Pauillac, v(hasFlavor, Strong)));
        axioms.add(SubClassOf(NonRedMeatCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Muscadet, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(Anjou, v(hasBody, Light)));
        axioms.add(SubClassOf(NonSpicyRedMeatCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(DarkMeatFowlCourse, all(hasDrink, v(hasBody, Light))));
        axioms.add(SubClassOf(BlandFish, Fish));
        axioms.add(SubClassOf(Anjou, v(hasColor, Rose)));
        axioms.add(SubClassOf(Dessert, EdibleThing));
        axioms.add(SubClassOf(Muscadet, v(hasSugar, Dry)));
        axioms.add(SubClassOf(DarkMeatFowlCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(PastaWithLightCreamSauce, PastaWithWhiteSauce));
        axioms.add(SubClassOf(StEmilion, v(madeFromGrape, CabernetSauvignonGrape)));
        axioms.add(SubClassOf(PetiteSyrah, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(DryRiesling, v(hasColor, White)));
        axioms.add(SubClassOf(Beaujolais, v(hasFlavor, Delicate)));
        axioms.add(SubClassOf(PetiteSyrah, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(Muscadet, v(hasBody, Light)));
        axioms.add(SubClassOf(FishCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(PastaWithNonSpicyRedSauceCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(PotableLiquid, ConsumableThing));
        axioms.add(SubClassOf(CabernetSauvignon, v(hasSugar, Dry)));
        axioms.add(SubClassOf(DarkMeatFowlCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(Zinfandel, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(NonSpicyRedMeatCourse, all(hasDrink, all(hasFlavor, ObjectOneOf(Moderate, Strong)))));
        axioms.add(SubClassOf(Port, v(hasFlavor, Strong)));
        axioms.add(SubClassOf(Sancerre, v(hasSugar, OffDry)));
        axioms.add(SubClassOf(EdibleThing, ConsumableThing));
        axioms.add(SubClassOf(Seafood, EdibleThing));
        axioms.add(SubClassOf(Port, v(hasSugar, Sweet)));
        axioms.add(SubClassOf(Chianti, v(hasFlavor, Moderate)));
        axioms.add(SubClassOf(Wine, all(hasMaker, Winery)));
        axioms.add(SubClassOf(LateHarvest, v(hasSugar, Sweet)));
        axioms.add(SubClassOf(Margaux, v(madeFromGrape, MerlotGrape)));
        axioms.add(SubClassOf(FruitCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(EarlyHarvest, all(hasSugar, ObjectOneOf(Dry, OffDry))));
        axioms.add(SubClassOf(EarlyHarvest, Wine));
        axioms.add(SubClassOf(SweetRiesling, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(NonSweetFruitCourse, all(hasDrink, v(hasSugar, OffDry))));
        axioms.add(SubClassOf(SemillonOrSauvignonBlanc, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(SweetFruit, EdibleThing));
        axioms.add(SubClassOf(WineFlavor, WineTaste));
        axioms.add(SubClassOf(LightMeatFowlCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(PastaWithHeavyCreamCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(WhiteLoire,
            all(madeFromGrape, ObjectOneOf(CheninBlancGrape, PinotBlancGrape, SauvignonBlancGrape))));
        axioms.add(SubClassOf(Beaujolais, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(Port, v(hasBody, Full)));
        axioms.add(SubClassOf(SweetRiesling, DessertWine));
        axioms.add(SubClassOf(NonBlandFish, Fish));
        axioms.add(SubClassOf(NonRedMeatCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(Wine, ObjectExactCardinality(1, hasSugar, df.getOWLThing())));
        axioms.add(SubClassOf(Chianti, ItalianWine));
        axioms.add(SubClassOf(Wine, ObjectExactCardinality(1, hasColor, df.getOWLThing())));
        axioms.add(SubClassOf(OtherTomatoBasedFoodCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(Beaujolais, v(hasSugar, Dry)));
        axioms.add(SubClassOf(PastaWithWhiteSauce, Pasta));
        axioms.add(SubClassOf(Chardonnay, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(Wine, ObjectExactCardinality(1, hasMaker, df.getOWLThing())));
        axioms.add(SubClassOf(Port, RedWine));
        axioms.add(SubClassOf(LightMeatFowlCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(PastaWithLightCreamCourse, all(hasDrink, v(hasBody, Light))));
        axioms.add(SubClassOf(Beaujolais, v(hasBody, Light)));
        axioms.add(SubClassOf(RedMeat, Meat));
        axioms.add(SubClassOf(Chianti, v(hasSugar, Dry)));
        axioms.add(SubClassOf(Sauterne, v(hasBody, Medium)));
        axioms.add(SubClassOf(MealCourse, all(hasDrink, Wine)));
        axioms.add(SubClassOf(PastaWithNonSpicyRedSauceCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(Pauillac, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(DryRiesling, all(hasBody, ObjectOneOf(Light, Medium))));
        axioms.add(SubClassOf(Beaujolais, v(hasColor, Red)));
        axioms.add(SubClassOf(Muscadet, v(madeFromGrape, PinotBlancGrape)));
        axioms.add(SubClassOf(CabernetFranc, v(hasFlavor, Moderate)));
        axioms.add(SubClassOf(PastaWithHeavyCreamCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(NonOysterShellfish, Shellfish));
        axioms.add(SubClassOf(Pauillac, v(hasBody, Full)));
        axioms.add(SubClassOf(Chardonnay, v(hasColor, White)));
        axioms.add(SubClassOf(Chianti, v(hasColor, Red)));
        axioms.add(SubClassOf(PinotNoir, v(hasColor, Red)));
        axioms.add(SubClassOf(Juice, PotableLiquid));
        axioms.add(SubClassOf(PastaWithLightCreamCourse, all(hasDrink, v(hasSugar, Dry))));
        axioms.add(SubClassOf(LightMeatFowl, Fowl));
        axioms.add(SubClassOf(PastaWithNonSpicyRedSauceCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(Meursault, v(hasBody, Full)));
        axioms.add(SubClassOf(FruitCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(Beaujolais, v(madeFromGrape, GamayGrape)));
        axioms.add(SubClassOf(WineColor, WineDescriptor));
        axioms.add(SubClassOf(WineTaste, WineDescriptor));
        axioms.add(SubClassOf(WineGrape, Grape));
        axioms.add(SubClassOf(CabernetSauvignon, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(OysterShellfishCourse, all(hasDrink, v(hasSugar, Sweet))));
        axioms.add(SubClassOf(SweetDessert, Dessert));
        axioms.add(SubClassOf(NonRedMeatCourse, all(hasDrink, v(hasFlavor, Strong))));
        axioms.add(SubClassOf(MealCourse, ObjectMinCardinality(1, hasFood, df.getOWLThing())));
        axioms.add(SubClassOf(Fish, Seafood));
        axioms.add(SubClassOf(PastaWithHeavyCreamCourse, all(hasDrink, v(hasFlavor, Moderate))));
        axioms.add(SubClassOf(Wine, ObjectSomeValuesFrom(locatedIn, Region)));
        axioms.add(SubClassOf(DryRiesling, v(hasFlavor, Delicate)));
        axioms.add(SubClassOf(OtherTomatoBasedFoodCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(BlandFishCourse, all(hasDrink, v(hasFlavor, Delicate))));
        axioms.add(SubClassOf(NonSpicyRedMeatCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(PastaWithSpicyRedSauceCourse, all(hasDrink, v(hasFlavor, Strong))));
        axioms.add(SubClassOf(Meat, EdibleThing));
        axioms.add(SubClassOf(WineSugar, WineTaste));
        axioms.add(SubClassOf(LateHarvest, Wine));
        axioms.add(SubClassOf(Pauillac, v(madeFromGrape, CabernetSauvignonGrape)));
        axioms.add(SubClassOf(Merlot, v(hasSugar, Dry)));
        axioms.add(SubClassOf(Anjou, v(hasSugar, OffDry)));
        axioms.add(SubClassOf(Juice, ObjectMinCardinality(1, madeFromFruit, df.getOWLThing())));
        axioms.add(SubClassOf(IceWine, all(hasFlavor, ObjectOneOf(Moderate, Strong))));
        axioms.add(SubClassOf(StEmilion, v(hasFlavor, Strong)));
        axioms.add(SubClassOf(Meritage, v(hasColor, Red)));
        axioms.add(SubClassOf(WhiteBordeaux, all(madeFromGrape, ObjectOneOf(SauvignonBlancGrape, SemillonGrape))));
        axioms.add(SubClassOf(Wine, ObjectExactCardinality(1, hasBody, df.getOWLThing())));
        axioms.add(SubClassOf(Wine, ObjectMinCardinality(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(SweetDessertCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(Shellfish, Seafood));
        axioms.add(SubClassOf(WhiteBurgundy, v(madeFromGrape, ChardonnayGrape)));
        axioms.add(SubClassOf(NonSweetFruitCourse, all(hasDrink, v(hasFlavor, Delicate))));
        axioms.add(SubClassOf(Burgundy, v(hasSugar, Dry)));
        axioms.add(SubClassOf(CheninBlanc, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(PastaWithSpicyRedSauceCourse, all(hasDrink, v(hasBody, Full))));
        axioms.add(SubClassOf(NonSweetFruit, EdibleThing));
        axioms.add(SubClassOf(CabernetFranc, v(hasBody, Medium)));
        axioms.add(SubClassOf(Margaux, v(hasFlavor, Delicate)));
        axioms.add(SubClassOf(Vintage, ObjectExactCardinality(1, hasVintageYear, df.getOWLThing())));
        axioms.add(SubClassOf(Sancerre, v(hasBody, Medium)));
        axioms.add(SubClassOf(Chianti, v(madeFromGrape, SangioveseGrape)));
        axioms.add(SubClassOf(CabernetSauvignon, v(hasColor, Red)));
        axioms.add(SubClassOf(Medoc, v(hasColor, Red)));
        axioms.add(SubClassOf(LightMeatFowlCourse, all(hasDrink, v(hasBody, Medium))));
        axioms.add(SubClassOf(ShellfishCourse, all(hasDrink, all(hasFlavor, ObjectOneOf(Moderate, Strong)))));
        axioms.add(SubClassOf(PastaWithSpicyRedSauceCourse, all(hasDrink, v(hasColor, Red))));
        axioms.add(SubClassOf(ShellfishCourse, all(hasDrink, v(hasBody, Full))));
        axioms.add(SubClassOf(SweetFruitCourse, all(hasDrink, v(hasSugar, Sweet))));
        axioms.add(SubClassOf(PastaWithNonSpicyRedSauce, PastaWithRedSauce));
        axioms.add(SubClassOf(Merlot, all(hasBody, ObjectOneOf(Light, Medium))));
        axioms.add(SubClassOf(Merlot, all(hasFlavor, ObjectOneOf(Delicate, Moderate))));
        axioms.add(SubClassOf(PastaWithRedSauce, Pasta));
        axioms.add(SubClassOf(SeafoodCourse, all(hasDrink, v(hasColor, White))));
        axioms.add(SubClassOf(Riesling, v(hasColor, White)));
        axioms.add(SubClassOf(WhiteBurgundy, omax(1, madeFromGrape, df.getOWLThing())));
        axioms.add(SubClassOf(NonRedMeat, Meat));
        axioms.add(SubClassOf(WineBody, WineTaste));
        axioms.add(SubClassOf(Sauterne, Bordeaux));
        axioms.add(SubClassOf(SpicyRedMeatCourse, all(hasDrink, v(hasBody, Full))));
        axioms.add(SubClassOf(CabernetSauvignon, all(hasBody, ObjectOneOf(Full, Medium))));
        axioms.add(SubClassOf(RedBordeaux, all(madeFromGrape, ObjectOneOf(CabernetSauvignonGrape, MerlotGrape))));
    }

    public static OWLObjectIntersectionOf o(OWLClassExpression... classExpressions) {
        return ObjectIntersectionOf(classExpressions);
    }

    public static OWLObjectHasValue v(OWLObjectPropertyExpression pe, OWLIndividual individual) {
        return ObjectHasValue(pe, individual);
    }

    public static OWLObjectMaxCardinality omax(int cardinality, OWLObjectPropertyExpression pe, OWLClassExpression ce) {
        return ObjectMaxCardinality(cardinality, pe, ce);
    }

    public static OWLObjectAllValuesFrom all(OWLObjectPropertyExpression pe, OWLClassExpression ce) {
        return ObjectAllValuesFrom(pe, ce);
    }

    private void equivalentClasses(List<OWLAxiom> axioms) {
        axioms.add(EquivalentClasses(Pauillac, o(Medoc, v(locatedIn, PauillacRegion))));
        axioms.add(EquivalentClasses(CaliforniaWine, o(Wine, v(locatedIn, CaliforniaRegion))));
        axioms.add(EquivalentClasses(SweetDessertCourse, o(MealCourse, all(hasFood, SweetDessert))));
        axioms.add(EquivalentClasses(DessertCourse, o(MealCourse, all(hasFood, Dessert))));
        axioms.add(EquivalentClasses(Margaux, o(Medoc, v(locatedIn, MargauxRegion))));
        axioms.add(EquivalentClasses(ShellfishCourse, o(MealCourse, all(hasFood, Shellfish))));
        axioms.add(EquivalentClasses(PinotBlanc,
            o(Wine, v(madeFromGrape, PinotBlancGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(CotesDOr, o(RedBurgundy, v(locatedIn, CotesDOrRegion))));
        axioms.add(EquivalentClasses(CheninBlanc,
            o(Wine, v(madeFromGrape, CheninBlancGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(OtherTomatoBasedFoodCourse, o(MealCourse, all(hasFood, OtherTomatoBasedFood))));
        axioms.add(EquivalentClasses(SweetWine, o(Wine, v(hasSugar, Sweet))));
        axioms.add(EquivalentClasses(Anjou, o(Loire, v(locatedIn, AnjouRegion))));
        axioms.add(EquivalentClasses(DryRedWine, o(DryWine, RedWine)));
        axioms.add(EquivalentClasses(WhiteLoire, o(Loire, WhiteWine)));
        axioms.add(EquivalentClasses(Meursault, o(WhiteBurgundy, v(locatedIn, MeursaultRegion))));
        axioms.add(EquivalentClasses(RoseWine, o(Wine, v(hasColor, Rose))));
        axioms.add(EquivalentClasses(FullBodiedWine, o(Wine, v(hasBody, Full))));
        axioms.add(EquivalentClasses(Loire, o(Wine, v(locatedIn, LoireRegion))));
        axioms.add(EquivalentClasses(Semillon,
            o(SemillonOrSauvignonBlanc, v(madeFromGrape, SemillonGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(DarkMeatFowlCourse, o(MealCourse, all(hasFood, DarkMeatFowl))));
        axioms.add(EquivalentClasses(PetiteSyrah,
            o(Wine, v(madeFromGrape, PetiteSyrahGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(BlandFishCourse, o(MealCourse, all(hasFood, BlandFish))));
        axioms.add(EquivalentClasses(RedBordeaux, o(Bordeaux, RedWine)));
        axioms.add(EquivalentClasses(RedWine, o(Wine, v(hasColor, Red))));
        axioms.add(EquivalentClasses(FruitCourse, o(MealCourse, all(hasFood, Fruit))));
        axioms.add(EquivalentClasses(CabernetFranc,
            o(Wine, v(madeFromGrape, CabernetFrancGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(TexasWine, o(Wine, v(locatedIn, TexasRegion))));
        axioms.add(EquivalentClasses(WhiteBordeaux, o(Bordeaux, WhiteWine)));
        axioms.add(EquivalentClasses(CheeseNutsDessertCourse, o(MealCourse, all(hasFood, CheeseNutsDessert))));
        axioms.add(EquivalentClasses(FishCourse, o(MealCourse, all(hasFood, Fish))));
        axioms.add(
            EquivalentClasses(Gamay, o(Wine, v(madeFromGrape, GamayGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(Merlot,
            o(Wine, v(madeFromGrape, MerlotGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(DryWine, o(Wine, v(hasSugar, Dry))));
        axioms.add(EquivalentClasses(Fruit, ObjectUnionOf(NonSweetFruit, SweetFruit)));
        axioms.add(EquivalentClasses(Sancerre, o(Loire, v(locatedIn, SancerreRegion))));
        axioms.add(EquivalentClasses(DryWhiteWine, o(DryWine, WhiteWine)));
        axioms.add(EquivalentClasses(Bordeaux, o(Wine, v(locatedIn, BordeauxRegion))));
        axioms.add(EquivalentClasses(AlsatianWine, o(Wine, v(locatedIn, AlsaceRegion))));
        axioms.add(EquivalentClasses(TableWine, o(Wine, v(hasSugar, Dry))));
        axioms.add(EquivalentClasses(GermanWine, o(Wine, v(locatedIn, GermanyRegion))));
        axioms.add(EquivalentClasses(CabernetSauvignon,
            o(Wine, v(madeFromGrape, CabernetSauvignonGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(NonOysterShellfishCourse, o(MealCourse, all(hasFood, NonOysterShellfish))));
        axioms.add(EquivalentClasses(WhiteWine, o(Wine, v(hasColor, White))));
        axioms.add(EquivalentClasses(RedMeatCourse, o(MealCourse, all(hasFood, RedMeat))));
        axioms.add(EquivalentClasses(RedTableWine, o(TableWine, v(hasColor, Red))));
        axioms.add(EquivalentClasses(NonBlandFishCourse, o(MealCourse, all(hasFood, NonBlandFish))));
        axioms.add(EquivalentClasses(Burgundy, o(Wine, v(locatedIn, BourgogneRegion))));
        axioms.add(EquivalentClasses(SeafoodCourse, o(MealCourse, all(hasFood, Seafood))));
        axioms.add(EquivalentClasses(WineColor, ObjectOneOf(Red, Rose, White)));
        axioms.add(EquivalentClasses(StEmilion, o(Bordeaux, v(locatedIn, StEmilionRegion))));
        axioms.add(EquivalentClasses(WineSugar, ObjectOneOf(Dry, OffDry, Sweet)));
        axioms.add(EquivalentClasses(Tours, o(Loire, v(locatedIn, ToursRegion))));
        axioms.add(EquivalentClasses(IceWine, o(DessertWine, LateHarvest, v(hasColor, White))));
        axioms
            .add(
                EquivalentClasses(Meritage,
                    o(Wine,
                        all(madeFromGrape, ObjectOneOf(CabernetFrancGrape, CabernetSauvignonGrape, MalbecGrape,
                            MerlotGrape, PetiteVerdotGrape)),
                    ObjectMinCardinality(2, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(Medoc, o(Bordeaux, v(locatedIn, MedocRegion))));
        axioms.add(EquivalentClasses(PastaWithHeavyCreamCourse, o(MealCourse, all(hasFood, PastaWithHeavyCreamSauce))));
        axioms.add(EquivalentClasses(SweetRiesling, o(Riesling, v(hasSugar, Sweet))));
        axioms.add(EquivalentClasses(RedBurgundy, o(Burgundy, RedWine)));
        axioms.add(EquivalentClasses(WineFlavor, ObjectOneOf(Delicate, Moderate, Strong)));
        axioms.add(
            EquivalentClasses(PastaWithNonSpicyRedSauceCourse, o(MealCourse, all(hasFood, PastaWithNonSpicyRedSauce))));
        axioms.add(EquivalentClasses(SemillonOrSauvignonBlanc,
            o(Wine, all(madeFromGrape, ObjectOneOf(SauvignonBlancGrape, SemillonGrape)))));
        axioms.add(EquivalentClasses(Riesling,
            o(Wine, v(madeFromGrape, RieslingGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(SweetFruitCourse, o(MealCourse, all(hasFood, SweetFruit))));
        axioms.add(EquivalentClasses(WineDescriptor, ObjectUnionOf(WineColor, WineTaste)));
        axioms.add(EquivalentClasses(ItalianWine, o(Wine, v(locatedIn, ItalianRegion))));
        axioms.add(EquivalentClasses(WhiteBurgundy, o(Burgundy, WhiteWine)));
        axioms.add(EquivalentClasses(PinotNoir,
            o(Wine, v(madeFromGrape, PinotNoirGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(LightMeatFowlCourse, o(MealCourse, all(hasFood, LightMeatFowl))));
        axioms.add(EquivalentClasses(NonSweetFruitCourse, o(MealCourse, all(hasFood, NonSweetFruit))));
        axioms.add(EquivalentClasses(Zinfandel,
            o(Wine, v(madeFromGrape, ZinfandelGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(WhiteNonSweetWine, o(WhiteWine, all(hasSugar, ObjectOneOf(Dry, OffDry)))));
        axioms.add(EquivalentClasses(SpicyRedMeatCourse, o(MealCourse, all(hasFood, SpicyRedMeat))));
        axioms.add(EquivalentClasses(DryRiesling, o(Riesling, v(hasSugar, Dry))));
        axioms
            .add(EquivalentClasses(PastaWithSpicyRedSauceCourse, o(MealCourse, all(hasFood, PastaWithSpicyRedSauce))));
        axioms.add(EquivalentClasses(WineBody, ObjectOneOf(Full, Light, Medium)));
        axioms.add(EquivalentClasses(NonRedMeatCourse, o(MealCourse, all(hasFood, NonRedMeat))));
        axioms.add(EquivalentClasses(NonSpicyRedMeatCourse, o(MealCourse, all(hasFood, NonSpicyRedMeat))));
        axioms.add(EquivalentClasses(Muscadet, o(Loire, v(locatedIn, MuscadetRegion))));
        axioms.add(EquivalentClasses(Beaujolais, o(Wine, v(locatedIn, BeaujolaisRegion))));
        axioms.add(EquivalentClasses(SauvignonBlanc, o(SemillonOrSauvignonBlanc, v(madeFromGrape, SauvignonBlancGrape),
            omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(PastaWithLightCreamCourse, o(MealCourse, all(hasFood, PastaWithLightCreamSauce))));
        axioms.add(EquivalentClasses(AmericanWine, o(Wine, v(locatedIn, USRegion))));
        axioms.add(EquivalentClasses(OysterShellfishCourse, o(MealCourse, all(hasFood, OysterShellfish))));
        axioms.add(EquivalentClasses(Chardonnay,
            o(Wine, v(madeFromGrape, ChardonnayGrape), omax(1, madeFromGrape, df.getOWLThing()))));
        axioms.add(EquivalentClasses(FrenchWine, o(Wine, v(locatedIn, FrenchRegion))));
        axioms.add(EquivalentClasses(NonConsumableThing, ObjectComplementOf(ConsumableThing)));
        axioms.add(EquivalentClasses(WhiteTableWine, o(TableWine, v(hasColor, White))));
    }

    private void classAssertions(List<OWLAxiom> axioms) {
        axioms.add(ClassAssertion(df.getOWLThing(), SauvignonBlancGrape));
        axioms.add(ClassAssertion(WineSugar, OffDry));
        axioms.add(ClassAssertion(Sauterne, ChateauDYchemSauterne));
        axioms.add(ClassAssertion(Winery, KalinCellars));
        axioms.add(ClassAssertion(Winery, SaucelitoCanyon));
        axioms.add(ClassAssertion(CabernetSauvignon, FormanCabernetSauvignon));
        axioms.add(ClassAssertion(Region, SancerreRegion));
        axioms.add(ClassAssertion(Region, CaliforniaRegion));
        axioms.add(ClassAssertion(PastaWithNonSpicyRedSauce, SpaghettiWithTomatoSauce));
        axioms.add(ClassAssertion(Winery, CongressSprings));
        axioms.add(ClassAssertion(NonRedMeat, Pork));
        axioms.add(ClassAssertion(Region, NewZealandRegion));
        axioms.add(ClassAssertion(df.getOWLThing(), CheninBlancGrape));
        axioms.add(ClassAssertion(LightMeatFowl, Turkey));
        axioms.add(ClassAssertion(Riesling, CorbansDryWhiteRiesling));
        axioms.add(ClassAssertion(Winery, McGuinnesso));
        axioms.add(ClassAssertion(WineFlavor, Moderate));
        axioms.add(ClassAssertion(PastaWithLightCreamSauce, PastaWithWhiteClamSauce));
        axioms.add(ClassAssertion(SauvignonBlanc, CorbansPrivateBinSauvignonBlanc));
        axioms.add(ClassAssertion(Merlot, GaryFarrellMerlot));
        axioms.add(ClassAssertion(Region, BordeauxRegion));
        axioms.add(ClassAssertion(NonBlandFish, Swordfish));
        axioms.add(ClassAssertion(Region, SouthAustraliaRegion));
        axioms.add(ClassAssertion(Winery, ClosDeVougeot));
        axioms.add(ClassAssertion(PetiteSyrah, MariettaPetiteSyrah));
        axioms.add(ClassAssertion(Region, AlsaceRegion));
        axioms.add(ClassAssertion(Zinfandel, CotturiZinfandel));
        axioms.add(ClassAssertion(df.getOWLThing(), Sweet));
        axioms.add(ClassAssertion(Winery, KathrynKennedy));
        axioms.add(ClassAssertion(Chianti, ChiantiClassico));
        axioms.add(ClassAssertion(Region, SantaCruzMountainsRegion));
        axioms.add(ClassAssertion(Winery, ChateauChevalBlanc));
        axioms.add(ClassAssertion(Winery, Taylor));
        axioms.add(ClassAssertion(Anjou, RoseDAnjou));
        axioms.add(ClassAssertion(Region, AustralianRegion));
        axioms.add(ClassAssertion(CheninBlanc, FoxenCheninBlanc));
        axioms.add(ClassAssertion(Merlot, LongridgeMerlot));
        axioms.add(ClassAssertion(Zinfandel, ElyseZinfandel));
        axioms.add(ClassAssertion(Winery, DAnjou));
        axioms.add(ClassAssertion(DarkMeatFowl, Goose));
        axioms.add(ClassAssertion(Region, CentralCoastRegion));
        axioms.add(ClassAssertion(Winery, SchlossRothermel));
        axioms.add(ClassAssertion(Winery, ChateauLafiteRothschild));
        axioms.add(ClassAssertion(WineGrape, MalbecGrape));
        axioms.add(ClassAssertion(Winery, SeanThackrey));
        axioms.add(ClassAssertion(Winery, Cotturi));
        axioms.add(ClassAssertion(WineGrape, ZinfandelGrape));
        axioms.add(ClassAssertion(IceWine, SelaksIceWine));
        axioms.add(ClassAssertion(Winery, CortonMontrachet));
        axioms.add(ClassAssertion(NonOysterShellfish, Mussels));
        axioms.add(ClassAssertion(Winery, Handley));
        axioms.add(ClassAssertion(NonOysterShellfish, Crab));
        axioms.add(ClassAssertion(Winery, ChateauMorgon));
        axioms.add(ClassAssertion(Winery, Bancroft));
        axioms.add(ClassAssertion(WineColor, Rose));
        axioms.add(ClassAssertion(Winery, SevreEtMaine));
        axioms.add(ClassAssertion(Winery, ChateauDeMeursault));
        axioms.add(ClassAssertion(df.getOWLThing(), Medium));
        axioms.add(ClassAssertion(WineGrape, PinotNoirGrape));
        axioms.add(ClassAssertion(CheeseNutsDessert, Cheese));
        axioms.add(ClassAssertion(RedTableWine, MariettaOldVinesRed));
        axioms.add(ClassAssertion(Region, CentralTexasRegion));
        axioms.add(ClassAssertion(Region, MendocinoRegion));
        axioms.add(ClassAssertion(PinotNoir, LaneTannerPinotNoir));
        axioms.add(ClassAssertion(Winery, PeterMccoy));
        axioms.add(ClassAssertion(Winery, SantaCruzMountainVineyard));
        axioms.add(ClassAssertion(df.getOWLThing(), Strong));
        axioms.add(ClassAssertion(SweetRiesling, SchlossVolradTrochenbierenausleseRiesling));
        axioms.add(ClassAssertion(Region, BeaujolaisRegion));
        axioms.add(ClassAssertion(SauvignonBlanc, SelaksSauvignonBlanc));
        axioms.add(ClassAssertion(Zinfandel, MariettaZinfandel));
        axioms.add(ClassAssertion(Winery, Longridge));
        axioms.add(ClassAssertion(Chardonnay, FormanChardonnay));
        axioms.add(ClassAssertion(Winery, Ventana));
        axioms.add(ClassAssertion(Chardonnay, MountEdenVineyardEdnaValleyChardonnay));
        axioms.add(ClassAssertion(df.getOWLThing(), Delicate));
        axioms.add(ClassAssertion(WineGrape, PetiteVerdotGrape));
        axioms.add(ClassAssertion(WhiteBurgundy, CortonMontrachetWhiteBurgundy));
        axioms.add(ClassAssertion(Semillon, KalinCellarsSemillon));
        axioms.add(ClassAssertion(df.getOWLThing(), Moderate));
        axioms.add(ClassAssertion(Winery, PageMillWinery));
        axioms.add(ClassAssertion(Winery, Foxen));
        axioms.add(ClassAssertion(WineSugar, Dry));
        axioms.add(ClassAssertion(Region, ChiantiRegion));
        axioms.add(ClassAssertion(WineBody, Medium));
        axioms.add(ClassAssertion(CabernetSauvignon, SantaCruzMountainVineyardCabernetSauvignon));
        axioms.add(ClassAssertion(Region, LoireRegion));
        axioms.add(ClassAssertion(Zinfandel, SaucelitoCanyonZinfandel));
        axioms.add(ClassAssertion(WhiteBurgundy, PulignyMontrachetWhiteBurgundy));
        axioms.add(ClassAssertion(Winery, GaryFarrell));
        axioms.add(ClassAssertion(Winery, Beringer));
        axioms.add(ClassAssertion(Winery, PulignyMontrachet));
        axioms.add(ClassAssertion(Region, NapaRegion));
        axioms.add(ClassAssertion(WineGrape, ChardonnayGrape));
        axioms.add(ClassAssertion(WineGrape, MerlotGrape));
        axioms.add(ClassAssertion(WineBody, Light));
        axioms.add(ClassAssertion(EatingGrape, ThompsonSeedless));
        axioms.add(ClassAssertion(WineGrape, CabernetSauvignonGrape));
        axioms.add(ClassAssertion(SweetFruit, Bananas));
        axioms.add(ClassAssertion(PastaWithSpicyRedSauce, FraDiavolo));
        axioms.add(ClassAssertion(WineGrape, PinotBlancGrape));
        axioms.add(ClassAssertion(NonOysterShellfish, Clams));
        axioms.add(ClassAssertion(BlandFish, Scrod));
        axioms.add(ClassAssertion(Port, TaylorPort));
        axioms.add(ClassAssertion(Chardonnay, MountadamChardonnay));
        axioms.add(ClassAssertion(Region, PortugalRegion));
        axioms.add(ClassAssertion(SweetFruit, MixedFruit));
        axioms.add(ClassAssertion(df.getOWLThing(), White));
        axioms.add(ClassAssertion(Winery, ChateauMargauxWinery));
        axioms.add(ClassAssertion(df.getOWLThing(), Light));
        axioms.add(ClassAssertion(df.getOWLThing(), PetiteVerdotGrape));
        axioms.add(ClassAssertion(Semillon, CongressSpringsSemillon));
        axioms.add(ClassAssertion(WineColor, Red));
        axioms.add(ClassAssertion(Region, TexasRegion));
        axioms.add(ClassAssertion(PinotNoir, MountEdenVineyardEstatePinotNoir));
        axioms.add(ClassAssertion(NonSpicyRedMeat, RoastBeef));
        axioms.add(ClassAssertion(Winery, LaneTanner));
        axioms.add(ClassAssertion(CheeseNutsDessert, Nuts));
        axioms.add(ClassAssertion(Pauillac, ChateauLafiteRothschildPauillac));
        axioms.add(ClassAssertion(Winery, Mountadam));
        axioms.add(ClassAssertion(Region, ArroyoGrandeRegion));
        axioms.add(ClassAssertion(PetiteSyrah, SeanThackreySiriusPetiteSyrah));
        axioms.add(ClassAssertion(df.getOWLThing(), Dry));
        axioms.add(ClassAssertion(WineGrape, SemillonGrape));
        axioms.add(ClassAssertion(WineColor, White));
        axioms.add(ClassAssertion(df.getOWLThing(), Rose));
        axioms.add(ClassAssertion(Winery, MountEdenVineyard));
        axioms.add(ClassAssertion(CheninBlanc, VentanaCheninBlanc));
        axioms.add(ClassAssertion(Winery, SchlossVolrad));
        axioms.add(ClassAssertion(DessertWine, WhitehallLanePrimavera));
        axioms.add(ClassAssertion(Region, MuscadetRegion));
        axioms.add(ClassAssertion(Winery, Stonleigh));
        axioms.add(ClassAssertion(Zinfandel, SaucelitoCanyonZinfandel1998));
        axioms.add(ClassAssertion(Winery, Elyse));
        axioms.add(ClassAssertion(SweetDessert, Cake));
        axioms.add(ClassAssertion(df.getOWLThing(), CabernetSauvignonGrape));
        axioms.add(ClassAssertion(OtherTomatoBasedFood, Pizza));
        axioms.add(ClassAssertion(df.getOWLThing(), SemillonGrape));
        axioms.add(ClassAssertion(df.getOWLThing(), PinotBlancGrape));
        axioms.add(ClassAssertion(Winery, ClosDeLaPoussie));
        axioms.add(ClassAssertion(Chardonnay, PeterMccoyChardonnay));
        axioms.add(ClassAssertion(Sancerre, ClosDeLaPoussieSancerre));
        axioms.add(ClassAssertion(Region, ToursRegion));
        axioms.add(ClassAssertion(WineGrape, SangioveseGrape));
        axioms.add(ClassAssertion(Region, EdnaValleyRegion));
        axioms.add(ClassAssertion(WineGrape, RieslingGrape));
        axioms.add(ClassAssertion(df.getOWLThing(), CabernetFrancGrape));
        axioms.add(ClassAssertion(Region, USRegion));
        axioms.add(ClassAssertion(Region, FrenchRegion));
        axioms.add(ClassAssertion(Winery, Marietta));
        axioms.add(ClassAssertion(Region, GermanyRegion));
        axioms.add(ClassAssertion(Region, SauterneRegion));
        axioms.add(ClassAssertion(BlandFish, Halibut));
        axioms.add(ClassAssertion(df.getOWLThing(), MalbecGrape));
        axioms.add(ClassAssertion(Meritage, KathrynKennedyLateral));
        axioms.add(ClassAssertion(df.getOWLThing(), Full));
        axioms.add(ClassAssertion(df.getOWLThing(), MerlotGrape));
        axioms.add(ClassAssertion(Winery, StGenevieve));
        axioms.add(ClassAssertion(VintageYear, Year1998));
        axioms.add(ClassAssertion(df.getOWLThing(), OffDry));
        axioms.add(ClassAssertion(Region, PauillacRegion));
        axioms.add(ClassAssertion(DarkMeatFowl, Duck));
        axioms.add(ClassAssertion(Region, MeursaultRegion));
        axioms.add(ClassAssertion(Chardonnay, BancroftChardonnay));
        axioms.add(ClassAssertion(NonSpicyRedMeat, Veal));
        axioms.add(ClassAssertion(SweetFruit, Peaches));
        axioms.add(ClassAssertion(BlandFish, Flounder));
        axioms.add(ClassAssertion(PinotNoir, MountadamPinotNoir));
        axioms.add(ClassAssertion(SauvignonBlanc, CorbansSauvignonBlanc));
        axioms.add(ClassAssertion(WineGrape, CabernetFrancGrape));
        axioms.add(ClassAssertion(Region, SonomaRegion));
        axioms.add(ClassAssertion(SweetRiesling, SchlossRothermelTrochenbierenausleseRiesling));
        axioms.add(ClassAssertion(LightMeatFowl, Chicken));
        axioms.add(ClassAssertion(Winery, Corbans));
        axioms.add(ClassAssertion(WineBody, Full));
        axioms.add(ClassAssertion(CabernetFranc, WhitehallLaneCabernetFranc));
        axioms.add(ClassAssertion(WineGrape, SauvignonBlancGrape));
        axioms.add(ClassAssertion(WhiteWine, StGenevieveTexasWhite));
        axioms.add(ClassAssertion(Beaujolais, ChateauMorgonBeaujolais));
        axioms.add(ClassAssertion(NonBlandFish, Tuna));
        axioms.add(ClassAssertion(CabernetSauvignon, MariettaCabernetSauvignon));
        axioms.add(ClassAssertion(Margaux, ChateauMargaux));
        axioms.add(ClassAssertion(Region, MedocRegion));
        axioms.add(ClassAssertion(SpicyRedMeat, BeefCurry));
        axioms.add(ClassAssertion(Region, ItalianRegion));
        axioms.add(ClassAssertion(Region, MargauxRegion));
        axioms.add(ClassAssertion(Winery, Forman));
        axioms.add(ClassAssertion(Winery, WhitehallLane));
        axioms.add(ClassAssertion(WineGrape, CheninBlancGrape));
        axioms.add(ClassAssertion(Region, CotesDOrRegion));
        axioms.add(ClassAssertion(Muscadet, SevreEtMaineMuscadet));
        axioms.add(ClassAssertion(CabernetSauvignon, PageMillWineryCabernetSauvignon));
        axioms.add(ClassAssertion(PastaWithHeavyCreamSauce, FettucineAlfRedo));
        axioms.add(ClassAssertion(NonOysterShellfish, Lobster));
        axioms.add(ClassAssertion(Region, BourgogneRegion));
        axioms.add(ClassAssertion(NonSpicyRedMeat, Steak));
        axioms.add(ClassAssertion(SauvignonBlanc, StonleighSauvignonBlanc));
        axioms.add(ClassAssertion(Region, AnjouRegion));
        axioms.add(ClassAssertion(df.getOWLThing(), Red));
        axioms.add(ClassAssertion(StEmilion, ChateauChevalBlancStEmilion));
        axioms.add(ClassAssertion(WineSugar, Sweet));
        axioms.add(ClassAssertion(WineFlavor, Strong));
        axioms.add(ClassAssertion(SpicyRedMeat, GarlickyRoast));
        axioms.add(ClassAssertion(Winery, Selaks));
        axioms.add(ClassAssertion(Region, SantaBarbaraRegion));
        axioms.add(ClassAssertion(Winery, ChateauDYchem));
        axioms.add(ClassAssertion(DryRiesling, MountadamRiesling));
        axioms.add(ClassAssertion(Region, StEmilionRegion));
        axioms.add(ClassAssertion(WineGrape, GamayGrape));
        axioms.add(ClassAssertion(WineFlavor, Delicate));
        axioms.add(ClassAssertion(WineGrape, PetiteSyrahGrape));
        axioms.add(ClassAssertion(Meursault, ChateauDeMeursaultMeursault));
        axioms.add(ClassAssertion(SweetDessert, Pie));
        axioms.add(ClassAssertion(OysterShellfish, Oysters));
        axioms.add(ClassAssertion(CotesDOr, ClosDeVougeotCotesDOr));
    }

    private void objectPropertyAssertions(List<OWLAxiom> axioms) {
        axioms.add(ObjectPropertyAssertion(hasMaker, ChateauDYchemSauterne, ChateauDYchem));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SantaCruzMountainVineyardCabernetSauvignon, Strong));
        axioms.add(ObjectPropertyAssertion(hasSugar, SaucelitoCanyonZinfandel1998, Dry));
        axioms.add(ObjectPropertyAssertion(hasBody, MountEdenVineyardEstatePinotNoir, Full));
        axioms.add(ObjectPropertyAssertion(hasBody, SaucelitoCanyonZinfandel, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, WhitehallLaneCabernetFranc, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, MountEdenVineyardEstatePinotNoir, EdnaValleyRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, CotturiZinfandel, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, SelaksSauvignonBlanc, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, StonleighSauvignonBlanc, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, NapaRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, MedocRegion, BordeauxRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, CorbansPrivateBinSauvignonBlanc, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, MariettaOldVinesRed, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, CongressSpringsSemillon, CongressSprings));
        axioms.add(ObjectPropertyAssertion(locatedIn, MountEdenVineyardEdnaValleyChardonnay, EdnaValleyRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, LaneTannerPinotNoir, Delicate));
        axioms.add(ObjectPropertyAssertion(hasBody, LaneTannerPinotNoir, Light));
        axioms.add(ObjectPropertyAssertion(hasFlavor, PulignyMontrachetWhiteBurgundy, Moderate));
        axioms.add(ObjectPropertyAssertion(hasMaker, CortonMontrachetWhiteBurgundy, CortonMontrachet));
        axioms.add(ObjectPropertyAssertion(hasBody, SelaksIceWine, Medium));
        axioms.add(ObjectPropertyAssertion(hasMaker, FoxenCheninBlanc, Foxen));
        axioms.add(ObjectPropertyAssertion(hasSugar, SaucelitoCanyonZinfandel, Dry));
        axioms.add(ObjectPropertyAssertion(hasBody, KathrynKennedyLateral, Medium));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SeanThackreySiriusPetiteSyrah, Strong));
        axioms.add(ObjectPropertyAssertion(hasFlavor, FoxenCheninBlanc, Moderate));
        axioms.add(ObjectPropertyAssertion(locatedIn, SauterneRegion, BordeauxRegion));
        axioms.add(ObjectPropertyAssertion(madeFromGrape, ChateauDYchemSauterne, SemillonGrape));
        axioms.add(ObjectPropertyAssertion(hasMaker, KalinCellarsSemillon, KalinCellars));
        axioms.add(ObjectPropertyAssertion(hasFlavor, ChateauDYchemSauterne, Strong));
        axioms.add(ObjectPropertyAssertion(hasFlavor, CortonMontrachetWhiteBurgundy, Strong));
        axioms.add(ObjectPropertyAssertion(hasBody, ElyseZinfandel, Full));
        axioms.add(ObjectPropertyAssertion(locatedIn, WhitehallLaneCabernetFranc, NapaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, CorbansDryWhiteRiesling, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, StGenevieveTexasWhite, CentralTexasRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, MountEdenVineyardEdnaValleyChardonnay, MountEdenVineyard));
        axioms.add(ObjectPropertyAssertion(locatedIn, ChiantiRegion, ItalianRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, CentralCoastRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, CorbansDryWhiteRiesling, Moderate));
        axioms.add(ObjectPropertyAssertion(hasBody, StonleighSauvignonBlanc, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, MuscadetRegion, LoireRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, TexasRegion, USRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, MountadamChardonnay, Full));
        axioms.add(ObjectPropertyAssertion(hasMaker, ChateauChevalBlancStEmilion, ChateauChevalBlanc));
        axioms.add(ObjectPropertyAssertion(hasFlavor, CotturiZinfandel, Strong));
        axioms.add(ObjectPropertyAssertion(hasSugar, CortonMontrachetWhiteBurgundy, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, PageMillWineryCabernetSauvignon, Moderate));
        axioms.add(ObjectPropertyAssertion(madeFromGrape, ChateauDYchemSauterne, SauvignonBlancGrape));
        axioms.add(ObjectPropertyAssertion(locatedIn, FormanCabernetSauvignon, NapaRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, VentanaCheninBlanc, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, PageMillWineryCabernetSauvignon, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, WhitehallLanePrimavera, Light));
        axioms.add(ObjectPropertyAssertion(locatedIn, CorbansSauvignonBlanc, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, PeterMccoyChardonnay, Moderate));
        axioms.add(ObjectPropertyAssertion(hasMaker, ChateauMorgonBeaujolais, ChateauMorgon));
        axioms.add(ObjectPropertyAssertion(hasBody, CorbansPrivateBinSauvignonBlanc, Full));
        axioms.add(ObjectPropertyAssertion(hasBody, FoxenCheninBlanc, Full));
        axioms.add(ObjectPropertyAssertion(hasSugar, WhitehallLaneCabernetFranc, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, WhitehallLanePrimavera, Delicate));
        axioms.add(ObjectPropertyAssertion(hasFlavor, GaryFarrellMerlot, Moderate));
        axioms.add(ObjectPropertyAssertion(hasBody, FormanCabernetSauvignon, Medium));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MariettaCabernetSauvignon, Moderate));
        axioms.add(ObjectPropertyAssertion(hasSugar, CotturiZinfandel, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, BordeauxRegion, FrenchRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, SantaCruzMountainVineyardCabernetSauvignon, Full));
        axioms.add(ObjectPropertyAssertion(hasSugar, FormanChardonnay, Dry));
        axioms.add(ObjectPropertyAssertion(hasSugar, MariettaOldVinesRed, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, MountadamChardonnay, SouthAustraliaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, ChateauMargaux, ChateauMargauxWinery));
        axioms.add(ObjectPropertyAssertion(locatedIn, PeterMccoyChardonnay, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, FormanCabernetSauvignon, Forman));
        axioms.add(ObjectPropertyAssertion(hasSugar, MariettaPetiteSyrah, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, LoireRegion, FrenchRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, MariettaPetiteSyrah, Marietta));
        axioms.add(ObjectPropertyAssertion(locatedIn, LaneTannerPinotNoir, SantaBarbaraRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, FormanCabernetSauvignon, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, PauillacRegion, MedocRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, CorbansSauvignonBlanc, Strong));
        axioms.add(ObjectPropertyAssertion(hasMaker, StonleighSauvignonBlanc, Stonleigh));
        axioms.add(ObjectPropertyAssertion(hasFlavor, FormanCabernetSauvignon, Strong));
        axioms.add(ObjectPropertyAssertion(hasBody, CorbansSauvignonBlanc, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, MeursaultRegion, BourgogneRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, MendocinoRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, SchlossVolradTrochenbierenausleseRiesling, Full));
        axioms.add(ObjectPropertyAssertion(hasMaker, CorbansDryWhiteRiesling, Corbans));
        axioms.add(ObjectPropertyAssertion(hasMaker, PeterMccoyChardonnay, PeterMccoy));
        axioms.add(ObjectPropertyAssertion(hasSugar, SchlossVolradTrochenbierenausleseRiesling, Sweet));
        axioms.add(ObjectPropertyAssertion(hasSugar, LongridgeMerlot, Dry));
        axioms.add(ObjectPropertyAssertion(hasBody, MariettaOldVinesRed, Medium));
        axioms.add(ObjectPropertyAssertion(hasMaker, MountadamPinotNoir, Mountadam));
        axioms.add(ObjectPropertyAssertion(hasMaker, MountEdenVineyardEstatePinotNoir, MountEdenVineyard));
        axioms.add(ObjectPropertyAssertion(hasMaker, SelaksIceWine, Selaks));
        axioms.add(ObjectPropertyAssertion(hasBody, CorbansDryWhiteRiesling, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, CortonMontrachetWhiteBurgundy, Full));
        axioms.add(ObjectPropertyAssertion(locatedIn, PageMillWineryCabernetSauvignon, NapaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, AnjouRegion, LoireRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, StonleighSauvignonBlanc, Delicate));
        axioms.add(ObjectPropertyAssertion(hasSugar, FoxenCheninBlanc, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, AlsaceRegion, FrenchRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, ChiantiClassico, Medium));
        axioms.add(ObjectPropertyAssertion(hasSugar, VentanaCheninBlanc, OffDry));
        axioms.add(ObjectPropertyAssertion(hasSugar, CorbansSauvignonBlanc, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, PageMillWineryCabernetSauvignon, PageMillWinery));
        axioms.add(ObjectPropertyAssertion(locatedIn, FormanChardonnay, NapaRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MountEdenVineyardEdnaValleyChardonnay, Moderate));
        axioms.add(ObjectPropertyAssertion(locatedIn, MountadamPinotNoir, SouthAustraliaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, SchlossRothermelTrochenbierenausleseRiesling, SchlossRothermel));
        axioms.add(ObjectPropertyAssertion(hasMaker, GaryFarrellMerlot, GaryFarrell));
        axioms.add(ObjectPropertyAssertion(locatedIn, ToursRegion, LoireRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, SantaBarbaraRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, SonomaRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, WhitehallLanePrimavera, Sweet));
        axioms.add(ObjectPropertyAssertion(hasBody, CotturiZinfandel, Full));
        axioms.add(ObjectPropertyAssertion(hasBody, PeterMccoyChardonnay, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, SaucelitoCanyonZinfandel1998, ArroyoGrandeRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, SeanThackreySiriusPetiteSyrah, SeanThackrey));
        axioms.add(ObjectPropertyAssertion(locatedIn, EdnaValleyRegion, CaliforniaRegion));
        axioms.add(
            ObjectPropertyAssertion(locatedIn, SantaCruzMountainVineyardCabernetSauvignon, SantaCruzMountainsRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, GaryFarrellMerlot, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, CongressSpringsSemillon, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, MountadamRiesling, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, MariettaCabernetSauvignon, Medium));
        axioms.add(ObjectPropertyAssertion(hasSugar, PageMillWineryCabernetSauvignon, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, CotturiZinfandel, Cotturi));
        axioms.add(ObjectPropertyAssertion(hasMaker, FormanChardonnay, Forman));
        axioms.add(ObjectPropertyAssertion(hasMaker, CorbansPrivateBinSauvignonBlanc, Corbans));
        axioms.add(ObjectPropertyAssertion(locatedIn, WhitehallLanePrimavera, NapaRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, PeterMccoyChardonnay, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, BancroftChardonnay, Bancroft));
        axioms.add(ObjectPropertyAssertion(hasFlavor, BancroftChardonnay, Moderate));
        axioms.add(ObjectPropertyAssertion(hasBody, MariettaZinfandel, Medium));
        axioms.add(ObjectPropertyAssertion(hasMaker, MariettaOldVinesRed, Marietta));
        axioms.add(ObjectPropertyAssertion(hasSugar, PulignyMontrachetWhiteBurgundy, Dry));
        axioms.add(ObjectPropertyAssertion(hasSugar, GaryFarrellMerlot, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, StGenevieveTexasWhite, StGenevieve));
        axioms.add(ObjectPropertyAssertion(hasMaker, MountadamChardonnay, Mountadam));
        axioms.add(ObjectPropertyAssertion(hasSugar, MountadamRiesling, Dry));
        axioms.add(ObjectPropertyAssertion(hasSugar, MariettaCabernetSauvignon, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, LongridgeMerlot, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, ChateauDeMeursaultMeursault, ChateauDeMeursault));
        axioms.add(ObjectPropertyAssertion(hasFlavor, KathrynKennedyLateral, Delicate));
        axioms.add(ObjectPropertyAssertion(locatedIn, SouthAustraliaRegion, AustralianRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, SeanThackreySiriusPetiteSyrah, NapaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, PulignyMontrachetWhiteBurgundy, PulignyMontrachet));
        axioms.add(ObjectPropertyAssertion(hasFlavor, FormanChardonnay, Moderate));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MariettaOldVinesRed, Moderate));
        axioms.add(ObjectPropertyAssertion(hasMaker, KathrynKennedyLateral, KathrynKennedy));
        axioms.add(ObjectPropertyAssertion(hasFlavor, ElyseZinfandel, Moderate));
        axioms.add(ObjectPropertyAssertion(hasSugar, MariettaZinfandel, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, SelaksSauvignonBlanc, Selaks));
        axioms.add(ObjectPropertyAssertion(locatedIn, BeaujolaisRegion, FrenchRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, StEmilionRegion, BordeauxRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, RoseDAnjou, DAnjou));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MountEdenVineyardEstatePinotNoir, Strong));
        axioms.add(ObjectPropertyAssertion(hasFlavor, StGenevieveTexasWhite, Moderate));
        axioms.add(ObjectPropertyAssertion(hasSugar, CorbansDryWhiteRiesling, OffDry));
        axioms.add(ObjectPropertyAssertion(hasBody, MountEdenVineyardEdnaValleyChardonnay, Medium));
        axioms.add(ObjectPropertyAssertion(hasMaker, ClosDeLaPoussieSancerre, ClosDeLaPoussie));
        axioms.add(ObjectPropertyAssertion(locatedIn, SantaCruzMountainsRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, CaliforniaRegion, USRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, MariettaZinfandel, Marietta));
        axioms.add(ObjectPropertyAssertion(locatedIn, SchlossVolradTrochenbierenausleseRiesling, GermanyRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, KalinCellarsSemillon, Strong));
        axioms.add(ObjectPropertyAssertion(hasSugar, SchlossRothermelTrochenbierenausleseRiesling, Sweet));
        axioms.add(ObjectPropertyAssertion(hasSugar, MountEdenVineyardEstatePinotNoir, Dry));
        axioms.add(ObjectPropertyAssertion(hasColor, SelaksIceWine, White));
        axioms.add(ObjectPropertyAssertion(locatedIn, FoxenCheninBlanc, SantaBarbaraRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, VentanaCheninBlanc, CentralCoastRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, LongridgeMerlot, Longridge));
        axioms.add(ObjectPropertyAssertion(locatedIn, BancroftChardonnay, NapaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, CorbansSauvignonBlanc, Corbans));
        axioms.add(ObjectPropertyAssertion(hasSugar, CongressSpringsSemillon, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, CongressSpringsSemillon, Moderate));
        axioms.add(ObjectPropertyAssertion(adjacentRegion, MendocinoRegion, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, FormanChardonnay, Full));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MariettaPetiteSyrah, Moderate));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MountadamRiesling, Delicate));
        axioms.add(ObjectPropertyAssertion(hasMaker, TaylorPort, Taylor));
        axioms.add(ObjectPropertyAssertion(hasFlavor, ChateauDeMeursaultMeursault, Moderate));
        axioms.add(ObjectPropertyAssertion(hasMaker, LaneTannerPinotNoir, LaneTanner));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SelaksSauvignonBlanc, Moderate));
        axioms.add(ObjectPropertyAssertion(locatedIn, CotesDOrRegion, BourgogneRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, KalinCellarsSemillon, Dry));
        axioms.add(ObjectPropertyAssertion(hasSugar, KathrynKennedyLateral, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, MariettaZinfandel, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, SchlossRothermelTrochenbierenausleseRiesling, GermanyRegion));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SaucelitoCanyonZinfandel, Moderate));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SaucelitoCanyonZinfandel1998, Moderate));
        axioms.add(ObjectPropertyAssertion(hasBody, BancroftChardonnay, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, MargauxRegion, MedocRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, ChiantiClassico, McGuinnesso));
        axioms.add(ObjectPropertyAssertion(locatedIn, SaucelitoCanyonZinfandel, ArroyoGrandeRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, WhitehallLaneCabernetFranc, WhitehallLane));
        axioms.add(ObjectPropertyAssertion(locatedIn, ElyseZinfandel, NapaRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, PulignyMontrachetWhiteBurgundy, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, MariettaPetiteSyrah, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, ElyseZinfandel, Elyse));
        axioms.add(ObjectPropertyAssertion(hasFlavor, VentanaCheninBlanc, Moderate));
        axioms.add(ObjectPropertyAssertion(locatedIn, BourgogneRegion, FrenchRegion));
        axioms.add(ObjectPropertyAssertion(hasBody, LongridgeMerlot, Light));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SelaksIceWine, Moderate));
        axioms.add(ObjectPropertyAssertion(hasMaker, SaucelitoCanyonZinfandel1998, SaucelitoCanyon));
        axioms.add(ObjectPropertyAssertion(hasSugar, BancroftChardonnay, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SchlossVolradTrochenbierenausleseRiesling, Moderate));
        axioms.add(ObjectPropertyAssertion(locatedIn, CorbansPrivateBinSauvignonBlanc, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, MountEdenVineyardEdnaValleyChardonnay, Dry));
        axioms.add(ObjectPropertyAssertion(hasSugar, SantaCruzMountainVineyardCabernetSauvignon, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, ChateauLafiteRothschildPauillac, ChateauLafiteRothschild));
        axioms.add(ObjectPropertyAssertion(hasMaker, SevreEtMaineMuscadet, SevreEtMaine));
        axioms.add(ObjectPropertyAssertion(hasMaker, ClosDeVougeotCotesDOr, ClosDeVougeot));
        axioms.add(ObjectPropertyAssertion(locatedIn, ArroyoGrandeRegion, CaliforniaRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, SelaksSauvignonBlanc, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(locatedIn, MariettaCabernetSauvignon, SonomaRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, MountadamRiesling, Mountadam));
        axioms.add(ObjectPropertyAssertion(hasSugar, LaneTannerPinotNoir, Dry));
        axioms.add(ObjectPropertyAssertion(hasVintageYear, SaucelitoCanyonZinfandel1998, Year1998));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MariettaZinfandel, Moderate));
        axioms.add(ObjectPropertyAssertion(hasMaker, SchlossVolradTrochenbierenausleseRiesling, SchlossVolrad));
        axioms.add(ObjectPropertyAssertion(hasBody, SeanThackreySiriusPetiteSyrah, Full));
        axioms.add(ObjectPropertyAssertion(hasBody, SchlossRothermelTrochenbierenausleseRiesling, Full));
        axioms.add(ObjectPropertyAssertion(hasMaker, MariettaCabernetSauvignon, Marietta));
        axioms.add(ObjectPropertyAssertion(hasSugar, MountadamChardonnay, Dry));
        axioms.add(ObjectPropertyAssertion(hasMaker, VentanaCheninBlanc, Ventana));
        axioms.add(ObjectPropertyAssertion(locatedIn, SancerreRegion, LoireRegion));
        axioms.add(ObjectPropertyAssertion(hasMaker, SaucelitoCanyonZinfandel, SaucelitoCanyon));
        axioms.add(ObjectPropertyAssertion(hasSugar, ElyseZinfandel, Dry));
        axioms.add(ObjectPropertyAssertion(hasBody, KalinCellarsSemillon, Full));
        axioms.add(ObjectPropertyAssertion(hasFlavor, SchlossRothermelTrochenbierenausleseRiesling, Strong));
        axioms.add(ObjectPropertyAssertion(hasFlavor, WhitehallLaneCabernetFranc, Moderate));
        axioms.add(ObjectPropertyAssertion(hasBody, SaucelitoCanyonZinfandel1998, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, MountadamRiesling, SouthAustraliaRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, StonleighSauvignonBlanc, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MountadamPinotNoir, Moderate));
        axioms.add(ObjectPropertyAssertion(locatedIn, CentralTexasRegion, TexasRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, StGenevieveTexasWhite, Dry));
        axioms.add(ObjectPropertyAssertion(locatedIn, SelaksIceWine, NewZealandRegion));
        axioms.add(ObjectPropertyAssertion(hasSugar, SeanThackreySiriusPetiteSyrah, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, CorbansPrivateBinSauvignonBlanc, Strong));
        axioms.add(ObjectPropertyAssertion(hasSugar, MountadamPinotNoir, Dry));
        axioms.add(ObjectPropertyAssertion(hasFlavor, MountadamChardonnay, Strong));
        axioms.add(ObjectPropertyAssertion(hasBody, MariettaPetiteSyrah, Medium));
        axioms.add(ObjectPropertyAssertion(hasFlavor, LongridgeMerlot, Moderate));
        axioms.add(ObjectPropertyAssertion(hasBody, MountadamPinotNoir, Medium));
        axioms.add(ObjectPropertyAssertion(hasBody, SelaksSauvignonBlanc, Medium));
        axioms.add(ObjectPropertyAssertion(locatedIn, GaryFarrellMerlot, SonomaRegion));
        axioms.add(
            ObjectPropertyAssertion(hasMaker, SantaCruzMountainVineyardCabernetSauvignon, SantaCruzMountainVineyard));
    }
}
